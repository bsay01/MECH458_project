
MECH458_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  0000172c  000017c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000172c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800324  00800324  000018e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002514  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001010  00000000  00000000  00003f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000110f  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00006068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000906  00000000  00000000  000062ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e2f  00000000  00000000  00006bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00007a21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
       2:	00 00       	nop
       4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
       a:	00 00       	nop
       c:	06 c7       	rjmp	.+3596   	; 0xe1a <__vector_3>
       e:	00 00       	nop
      10:	13 c7       	rjmp	.+3622   	; 0xe38 <__vector_4>
      12:	00 00       	nop
      14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
      22:	00 00       	nop
      24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
      32:	00 00       	nop
      34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
      4e:	00 00       	nop
      50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
      52:	00 00       	nop
      54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
      56:	00 00       	nop
      58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
      5e:	00 00       	nop
      60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
      66:	00 00       	nop
      68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
      72:	00 00       	nop
      74:	54 c7       	rjmp	.+3752   	; 0xf1e <__vector_29>
      76:	00 00       	nop
      78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
      7e:	00 00       	nop
      80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
      82:	00 00       	nop
      84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
      8e:	00 00       	nop
      90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
      92:	00 00       	nop
      94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
      96:	00 00       	nop
      98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
      be:	00 00       	nop
      c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
      da:	00 00       	nop
      dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
      de:	00 00       	nop
      e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	05 a8       	ldd	r0, Z+53	; 0x35
      e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
      e8:	b2 d4       	rcall	.+2404   	; 0xa4e <main+0x186>
      ea:	4e b9       	out	0x0e, r20	; 14
      ec:	38 36       	cpi	r19, 0x68	; 104
      ee:	a9 02       	muls	r26, r25
      f0:	0c 50       	subi	r16, 0x0C	; 12
      f2:	b9 91       	ld	r27, Y+
      f4:	86 88       	ldd	r8, Z+22	; 0x16
      f6:	08 3c       	cpi	r16, 0xC8	; 200
      f8:	a6 aa       	std	Z+54, r10	; 0x36
      fa:	aa 2a       	or	r10, r26
      fc:	be 00       	.word	0x00be	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d1 e2       	ldi	r29, 0x21	; 33
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0c bf       	out	0x3c, r16	; 60

00000112 <__do_copy_data>:
     112:	13 e0       	ldi	r17, 0x03	; 3
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	ec e2       	ldi	r30, 0x2C	; 44
     11a:	f7 e1       	ldi	r31, 0x17	; 23
     11c:	00 e0       	ldi	r16, 0x00	; 0
     11e:	0b bf       	out	0x3b, r16	; 59
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x14>
     122:	07 90       	elpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	a4 32       	cpi	r26, 0x24	; 36
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0x10>

0000012c <__do_clear_bss>:
     12c:	23 e0       	ldi	r18, 0x03	; 3
     12e:	a4 e2       	ldi	r26, 0x24	; 36
     130:	b3 e0       	ldi	r27, 0x03	; 3
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	ad 33       	cpi	r26, 0x3D	; 61
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	c5 d3       	rcall	.+1930   	; 0x8c8 <main>
     13e:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <_exit>

00000142 <__bad_interrupt>:
     142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <mTimer>:
- Initializes Timer 1 in CTC mode, timer clock 125 kHz
takes parameter milliseconds_to_delay, which is the number of ms to delay the program
note this is evaluated as "milliseconds_to_delay = number of times to milliseconds_to_delay to 125"
*/
void mTimer(int milliseconds_to_delay)
{
     144:	ac 01       	movw	r20, r24
    // this function leaves timer 1 in CTC mode

    // scales clock by /64, making the timer clock 250 kHz
    // therefore, there are 250 timer cycles per 1 ms
    TCCR1B &= ~_BV(CS12); // 0
     146:	e1 e8       	ldi	r30, 0x81	; 129
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	8b 7f       	andi	r24, 0xFB	; 251
     14e:	80 83       	st	Z, r24
    TCCR1B |= _BV(CS11);  // 1
     150:	80 81       	ld	r24, Z
     152:	82 60       	ori	r24, 0x02	; 2
     154:	80 83       	st	Z, r24
    TCCR1B |= _BV(CS10);  // 1
     156:	80 81       	ld	r24, Z
     158:	81 60       	ori	r24, 0x01	; 1
     15a:	80 83       	st	Z, r24

    // set WGM1[3:0] to 0100, enabling CTC mode (clear timer on compare)
    // this means TCNT1 will be cleared when it reaches set value of OCR1A
    TCCR1B &= ~_BV(WGM13); // 0
     15c:	80 81       	ld	r24, Z
     15e:	8f 7e       	andi	r24, 0xEF	; 239
     160:	80 83       	st	Z, r24
    TCCR1B |= _BV(WGM12);  // 1
     162:	80 81       	ld	r24, Z
     164:	88 60       	ori	r24, 0x08	; 8
     166:	80 83       	st	Z, r24
    TCCR1A &= ~_BV(WGM11); // 0
     168:	e0 e8       	ldi	r30, 0x80	; 128
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	8d 7f       	andi	r24, 0xFD	; 253
     170:	80 83       	st	Z, r24
    TCCR1A &= ~_BV(WGM10); // 0
     172:	80 81       	ld	r24, Z
     174:	8e 7f       	andi	r24, 0xFE	; 254
     176:	80 83       	st	Z, r24

    // setting values for TCNT1 and OCRA1, the timer and maximum value respectively
    // datasheet says it's best to set the timer value before the max value to avoid errors
    TCNT1 = 0;
     178:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     17c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    OCR1A = 250;
     180:	8a ef       	ldi	r24, 0xFA	; 250
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     188:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    for (int ms_delayed = 0; ms_delayed < milliseconds_to_delay; ms_delayed++)
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	07 c0       	rjmp	.+14     	; 0x1a0 <mTimer+0x5c>
    {
        TIFR1 |= _BV(OCF1A); // start timer. clears the interrupt flag by writing 1 to its bit
     192:	96 b3       	in	r25, 0x16	; 22
     194:	92 60       	ori	r25, 0x02	; 2
     196:	96 bb       	out	0x16, r25	; 22

        // wait for OCF1A to trigger (bit 1)
        while (!(TIFR1 & 0b00000010))
     198:	b1 9b       	sbis	0x16, 1	; 22
     19a:	fe cf       	rjmp	.-4      	; 0x198 <mTimer+0x54>
    // setting values for TCNT1 and OCRA1, the timer and maximum value respectively
    // datasheet says it's best to set the timer value before the max value to avoid errors
    TCNT1 = 0;
    OCR1A = 250;

    for (int ms_delayed = 0; ms_delayed < milliseconds_to_delay; ms_delayed++)
     19c:	2f 5f       	subi	r18, 0xFF	; 255
     19e:	3f 4f       	sbci	r19, 0xFF	; 255
     1a0:	24 17       	cp	r18, r20
     1a2:	35 07       	cpc	r19, r21
     1a4:	b4 f3       	brlt	.-20     	; 0x192 <mTimer+0x4e>
    }

    // reset timer 1 scaler back to 000
    // CS12 already set to 0
    // ! may not be necessary in final project code
    TCCR1B &= ~_BV(CS11);
     1a6:	e1 e8       	ldi	r30, 0x81	; 129
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	8d 7f       	andi	r24, 0xFD	; 253
     1ae:	80 83       	st	Z, r24
    TCCR1B &= ~_BV(CS10);
     1b0:	80 81       	ld	r24, Z
     1b2:	8e 7f       	andi	r24, 0xFE	; 254
     1b4:	80 83       	st	Z, r24
     1b6:	08 95       	ret

000001b8 <startADC>:
- starts ADC in free run mode, left adjusted, voltage reference AVCC
! note use of sei(), which polls for pending interrupts and runs them after the last line
*/
void startADC()
{
    cli(); // disable all interrupts
     1b8:	f8 94       	cli

    // - config ADC
    // by default, ADC input is set to ADC0 / PORTF0 / 97
    ADCSRA |= _BV(ADEN); // enable ADC
     1ba:	ea e7       	ldi	r30, 0x7A	; 122
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	80 68       	ori	r24, 0x80	; 128
     1c2:	80 83       	st	Z, r24
    ADCSRA |= _BV(ADIE); // enable ADC interrupt
     1c4:	80 81       	ld	r24, Z
     1c6:	88 60       	ori	r24, 0x08	; 8
     1c8:	80 83       	st	Z, r24
    // ADTS2:0 = 0 (default) means ADC is in free running mode

    // - set result to present left-adjusted in ADCH and ADCL
    ADMUX |= _BV(ADLAR);
     1ca:	ac e7       	ldi	r26, 0x7C	; 124
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	8c 91       	ld	r24, X
     1d0:	80 62       	ori	r24, 0x20	; 32
     1d2:	8c 93       	st	X, r24
    however, only the 8 MSBs are read, so the output will be slightly stepped.
    Otherwise, ADCL must be read first, then ADCH, to ensure content is from the same conversion.
    */

    // - sets voltage reference to AVCC
    ADMUX |= _BV(REFS0);
     1d4:	8c 91       	ld	r24, X
     1d6:	80 64       	ori	r24, 0x40	; 64
     1d8:	8c 93       	st	X, r24
    AVCC should also be connected to Vcc through a lowpass (fig. 26-9)
        connect Vcc => 10 uH inductor => 100 nF capacitor => GND
        connect AVCC between inductor and capacitor
    */

    sei(); // sets the Global Enable for all interrupt
     1da:	78 94       	sei

    // - initialize ADC, start the first conversion
    // ! first conversion not to be trusted!!
    ADCSRA |= _BV(ADSC);
     1dc:	80 81       	ld	r24, Z
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 83       	st	Z, r24
     1e2:	08 95       	ret

000001e4 <flashPortL>:
repeats "times" parameter amount of times
depends on mTimer function
! continues forever if called with times = 0
*/
void flashPortL(unsigned char times)
{
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	c8 2f       	mov	r28, r24
    if (!times)
     1ee:	81 11       	cpse	r24, r1
     1f0:	1a c0       	rjmp	.+52     	; 0x226 <flashPortL+0x42>
    {
        while (1)
        {
            PORTL = 0xFF;
     1f2:	cb e0       	ldi	r28, 0x0B	; 11
     1f4:	d1 e0       	ldi	r29, 0x01	; 1
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	88 83       	st	Y, r24
            mTimer(200);
     1fa:	88 ec       	ldi	r24, 0xC8	; 200
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	a2 df       	rcall	.-188    	; 0x144 <mTimer>
            PORTL = 0x00;
     200:	18 82       	st	Y, r1
            mTimer(200);
     202:	88 ec       	ldi	r24, 0xC8	; 200
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	9e df       	rcall	.-196    	; 0x144 <mTimer>
     208:	f4 cf       	rjmp	.-24     	; 0x1f2 <flashPortL+0xe>
        }
    }

    while (times > 0)
    {
        PORTL = 0xFF;
     20a:	0b e0       	ldi	r16, 0x0B	; 11
     20c:	11 e0       	ldi	r17, 0x01	; 1
     20e:	8f ef       	ldi	r24, 0xFF	; 255
     210:	f8 01       	movw	r30, r16
     212:	80 83       	st	Z, r24
        mTimer(250);
     214:	8a ef       	ldi	r24, 0xFA	; 250
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	95 df       	rcall	.-214    	; 0x144 <mTimer>
        PORTL = 0x00;
     21a:	f8 01       	movw	r30, r16
        mTimer(250);
     21c:	10 82       	st	Z, r1
     21e:	8a ef       	ldi	r24, 0xFA	; 250
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	90 df       	rcall	.-224    	; 0x144 <mTimer>
        times--;
     224:	c1 50       	subi	r28, 0x01	; 1
            PORTL = 0x00;
            mTimer(200);
        }
    }

    while (times > 0)
     226:	c1 11       	cpse	r28, r1
     228:	f0 cf       	rjmp	.-32     	; 0x20a <flashPortL+0x26>
        mTimer(250);
        PORTL = 0x00;
        mTimer(250);
        times--;
    }
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	08 95       	ret

00000234 <startPWM>:
parameter duty_cycle takes duty cycle of PWM in % as a float
ex. duty_cycle = 50 => 50% duty cycle
values < 0 are treated as 0, values > 100 are treated as 100
*/
void startPWM(float duty_cycle)
{
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	6b 01       	movw	r12, r22
     23e:	7c 01       	movw	r14, r24
    // repair duty_cycle parameter
    if (duty_cycle < 0)
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	a9 01       	movw	r20, r18
     246:	ef d6       	rcall	.+3550   	; 0x1026 <__cmpsf2>
     248:	88 23       	and	r24, r24
     24a:	1c f4       	brge	.+6      	; 0x252 <startPWM+0x1e>
    {
        duty_cycle = 0;
     24c:	c1 2c       	mov	r12, r1
     24e:	d1 2c       	mov	r13, r1
     250:	76 01       	movw	r14, r12
    }

    if (duty_cycle > 100)
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	48 ec       	ldi	r20, 0xC8	; 200
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__gesf2>
     262:	18 16       	cp	r1, r24
     264:	44 f4       	brge	.+16     	; 0x276 <startPWM+0x42>
    {
        duty_cycle = 100;
     266:	0f 2e       	mov	r0, r31
     268:	c1 2c       	mov	r12, r1
     26a:	d1 2c       	mov	r13, r1
     26c:	f8 ec       	ldi	r31, 0xC8	; 200
     26e:	ef 2e       	mov	r14, r31
     270:	f2 e4       	ldi	r31, 0x42	; 66
     272:	ff 2e       	mov	r15, r31
     274:	f0 2d       	mov	r31, r0
    }

    // set Timer 0 (8-bit timer) to Fast PWM mode
    // also sets TOP to 0xFF, OCR0A update at TOP, and TOV flag set on MAX
    TCCR0B &= ~_BV(WGM02);
     276:	85 b5       	in	r24, 0x25	; 37
     278:	87 7f       	andi	r24, 0xF7	; 247
     27a:	85 bd       	out	0x25, r24	; 37
    TCCR0A |= _BV(WGM01);
     27c:	84 b5       	in	r24, 0x24	; 36
     27e:	82 60       	ori	r24, 0x02	; 2
     280:	84 bd       	out	0x24, r24	; 36
    TCCR0A |= _BV(WGM00);
     282:	84 b5       	in	r24, 0x24	; 36
     284:	81 60       	ori	r24, 0x01	; 1
     286:	84 bd       	out	0x24, r24	; 36

    // clear OC0A on Compare Match, set at bottom
    TCCR0A |= _BV(COM0A1);
     288:	84 b5       	in	r24, 0x24	; 36
     28a:	80 68       	ori	r24, 0x80	; 128
     28c:	84 bd       	out	0x24, r24	; 36
    TCCR0A &= ~_BV(COM0A0);
     28e:	84 b5       	in	r24, 0x24	; 36
     290:	8f 7b       	andi	r24, 0xBF	; 191
     292:	84 bd       	out	0x24, r24	; 36

    // set timer 0 clock prescalar to 8
    // timer clock 2 MHz, timer period 128 microseconds
    // therefore PWM frequency 7,812.50 Hz
    TCCR0B &= ~_BV(CS02);
     294:	85 b5       	in	r24, 0x25	; 37
     296:	8b 7f       	andi	r24, 0xFB	; 251
     298:	85 bd       	out	0x25, r24	; 37
    TCCR0B |= _BV(CS01);
     29a:	85 b5       	in	r24, 0x25	; 37
     29c:	82 60       	ori	r24, 0x02	; 2
     29e:	85 bd       	out	0x25, r24	; 37
    TCCR0B &= ~_BV(CS00);
     2a0:	85 b5       	in	r24, 0x25	; 37
     2a2:	8e 7f       	andi	r24, 0xFE	; 254
     2a4:	85 bd       	out	0x25, r24	; 37

    // set timer compare (duty cycle) using duty_cycle parameter
    OCR0A = (int)((duty_cycle / 100) * (0xFF));
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	48 ec       	ldi	r20, 0xC8	; 200
     2ac:	52 e4       	ldi	r21, 0x42	; 66
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	bd d6       	rcall	.+3450   	; 0x102e <__divsf3>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	4f e7       	ldi	r20, 0x7F	; 127
     2ba:	53 e4       	ldi	r21, 0x43	; 67
     2bc:	0e 94 66 09 	call	0x12cc	; 0x12cc <__mulsf3>
     2c0:	1e d7       	rcall	.+3644   	; 0x10fe <__fixsfsi>
     2c2:	67 bd       	out	0x27, r22	; 39

    // ! RUN THIS IN MAIN IF COMMENTED
    // DDRB = 0xFF; // set output on PORTB7, which is also OC0A

    TCNT0 = 0x00;        // set timer 0 value to 0, top already set to 0xFF
     2c4:	16 bc       	out	0x26, r1	; 38
    TIFR0 |= _BV(OCF0A); // sets the output compare A match flag, starting timer
     2c6:	85 b3       	in	r24, 0x15	; 21
     2c8:	82 60       	ori	r24, 0x02	; 2
     2ca:	85 bb       	out	0x15, r24	; 21
}
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <nightriderPortL>:

void nightriderPortL()
{
	while(1)
	{
		PORTL = 0b00010000;
     2d6:	cb e0       	ldi	r28, 0x0B	; 11
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
     2da:	80 e1       	ldi	r24, 0x10	; 16
     2dc:	88 83       	st	Y, r24
		mTimer(125);
     2de:	8d e7       	ldi	r24, 0x7D	; 125
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	30 df       	rcall	.-416    	; 0x144 <mTimer>
		PORTL = 0b00110000;
     2e4:	10 e3       	ldi	r17, 0x30	; 48
     2e6:	18 83       	st	Y, r17
		mTimer(125);
     2e8:	8d e7       	ldi	r24, 0x7D	; 125
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	2b df       	rcall	.-426    	; 0x144 <mTimer>
		PORTL = 0b01100000;
     2ee:	00 e6       	ldi	r16, 0x60	; 96
     2f0:	08 83       	st	Y, r16
		mTimer(125);
     2f2:	8d e7       	ldi	r24, 0x7D	; 125
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	26 df       	rcall	.-436    	; 0x144 <mTimer>
		PORTL = 0b11000000;
     2f8:	0f 2e       	mov	r0, r31
     2fa:	f0 ec       	ldi	r31, 0xC0	; 192
     2fc:	ff 2e       	mov	r15, r31
     2fe:	f0 2d       	mov	r31, r0
		mTimer(125);
     300:	f8 82       	st	Y, r15
     302:	8d e7       	ldi	r24, 0x7D	; 125
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	1e df       	rcall	.-452    	; 0x144 <mTimer>
		PORTL = 0b10000000;
     308:	80 e8       	ldi	r24, 0x80	; 128
		mTimer(125);
     30a:	88 83       	st	Y, r24
     30c:	8d e7       	ldi	r24, 0x7D	; 125
     30e:	90 e0       	ldi	r25, 0x00	; 0
		PORTL = 0b11000000;
     310:	19 df       	rcall	.-462    	; 0x144 <mTimer>
		mTimer(125);
     312:	f8 82       	st	Y, r15
     314:	8d e7       	ldi	r24, 0x7D	; 125
     316:	90 e0       	ldi	r25, 0x00	; 0
		PORTL = 0b01100000;
     318:	15 df       	rcall	.-470    	; 0x144 <mTimer>
		mTimer(125);
     31a:	08 83       	st	Y, r16
     31c:	8d e7       	ldi	r24, 0x7D	; 125
     31e:	90 e0       	ldi	r25, 0x00	; 0
		PORTL = 0b00110000;
     320:	11 df       	rcall	.-478    	; 0x144 <mTimer>
		mTimer(125);
     322:	18 83       	st	Y, r17
     324:	8d e7       	ldi	r24, 0x7D	; 125
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0d df       	rcall	.-486    	; 0x144 <mTimer>
     32a:	d5 cf       	rjmp	.-86     	; 0x2d6 <nightriderPortL>

0000032c <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     32c:	87 b1       	in	r24, 0x07	; 7
     32e:	80 7f       	andi	r24, 0xF0	; 240
     330:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     332:	88 b1       	in	r24, 0x08	; 8
     334:	80 62       	ori	r24, 0x20	; 32
     336:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     338:	88 b1       	in	r24, 0x08	; 8
     33a:	8f 7b       	andi	r24, 0xBF	; 191
     33c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	8a 95       	dec	r24
     342:	f1 f7       	brne	.-4      	; 0x340 <LCDBusyLoop+0x14>
     344:	00 c0       	rjmp	.+0      	; 0x346 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS

	do
	{

		SET_E();
     346:	88 b1       	in	r24, 0x08	; 8
     348:	80 68       	ori	r24, 0x80	; 128
     34a:	88 b9       	out	0x08, r24	; 8
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	9a 95       	dec	r25
     350:	f1 f7       	brne	.-4      	; 0x34e <LCDBusyLoop+0x22>
     352:	00 c0       	rjmp	.+0      	; 0x354 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
     354:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     356:	82 95       	swap	r24
     358:	80 7f       	andi	r24, 0xF0	; 240
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	9a 95       	dec	r25
     35e:	f1 f7       	brne	.-4      	; 0x35c <LCDBusyLoop+0x30>
     360:	00 c0       	rjmp	.+0      	; 0x362 <LCDBusyLoop+0x36>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
     362:	98 b1       	in	r25, 0x08	; 8
     364:	9f 77       	andi	r25, 0x7F	; 127
     366:	98 b9       	out	0x08, r25	; 8
     368:	95 e0       	ldi	r25, 0x05	; 5
     36a:	9a 95       	dec	r25
     36c:	f1 f7       	brne	.-4      	; 0x36a <LCDBusyLoop+0x3e>
     36e:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
     370:	98 b1       	in	r25, 0x08	; 8
     372:	90 68       	ori	r25, 0x80	; 128
     374:	98 b9       	out	0x08, r25	; 8
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	9a 95       	dec	r25
     37a:	f1 f7       	brne	.-4      	; 0x378 <LCDBusyLoop+0x4c>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <LCDBusyLoop+0x52>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
     37e:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     380:	80 78       	andi	r24, 0x80	; 128
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	9a 95       	dec	r25
     386:	f1 f7       	brne	.-4      	; 0x384 <LCDBusyLoop+0x58>
     388:	00 c0       	rjmp	.+0      	; 0x38a <LCDBusyLoop+0x5e>

		_delay_us(0.5);

		CLEAR_E();
     38a:	98 b1       	in	r25, 0x08	; 8
     38c:	9f 77       	andi	r25, 0x7F	; 127
     38e:	98 b9       	out	0x08, r25	; 8
     390:	95 e0       	ldi	r25, 0x05	; 5
     392:	9a 95       	dec	r25
     394:	f1 f7       	brne	.-4      	; 0x392 <LCDBusyLoop+0x66>
     396:	00 00       	nop
		_delay_us(1);	//tEL

	}while(busy);
     398:	81 11       	cpse	r24, r1
     39a:	d5 cf       	rjmp	.-86     	; 0x346 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     39c:	88 b1       	in	r24, 0x08	; 8
     39e:	8f 7d       	andi	r24, 0xDF	; 223
     3a0:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3a2:	87 b1       	in	r24, 0x07	; 7
     3a4:	8f 60       	ori	r24, 0x0F	; 15
     3a6:	87 b9       	out	0x07, r24	; 7
     3a8:	08 95       	ret

000003aa <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     3aa:	28 2f       	mov	r18, r24
     3ac:	22 95       	swap	r18
     3ae:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     3b0:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     3b2:	61 11       	cpse	r22, r1
     3b4:	04 c0       	rjmp	.+8      	; 0x3be <LCDByte+0x14>
	CLEAR_RS();
     3b6:	98 b1       	in	r25, 0x08	; 8
     3b8:	9f 7b       	andi	r25, 0xBF	; 191
     3ba:	98 b9       	out	0x08, r25	; 8
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <LCDByte+0x1a>
else
	SET_RS();
     3be:	98 b1       	in	r25, 0x08	; 8
     3c0:	90 64       	ori	r25, 0x40	; 64
     3c2:	98 b9       	out	0x08, r25	; 8
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	9a 95       	dec	r25
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCDByte+0x1c>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     3cc:	98 b1       	in	r25, 0x08	; 8
     3ce:	90 68       	ori	r25, 0x80	; 128
     3d0:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     3d2:	98 b1       	in	r25, 0x08	; 8
     3d4:	90 7f       	andi	r25, 0xF0	; 240
     3d6:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     3d8:	98 b9       	out	0x08, r25	; 8
     3da:	95 e0       	ldi	r25, 0x05	; 5
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <LCDByte+0x32>
     3e0:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     3e2:	98 b1       	in	r25, 0x08	; 8
     3e4:	9f 77       	andi	r25, 0x7F	; 127
     3e6:	98 b9       	out	0x08, r25	; 8
     3e8:	95 e0       	ldi	r25, 0x05	; 5
     3ea:	9a 95       	dec	r25
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCDByte+0x40>
     3ee:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     3f0:	98 b1       	in	r25, 0x08	; 8
     3f2:	90 68       	ori	r25, 0x80	; 128
     3f4:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     3f6:	98 b1       	in	r25, 0x08	; 8
     3f8:	90 7f       	andi	r25, 0xF0	; 240
     3fa:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     3fc:	88 b9       	out	0x08, r24	; 8
     3fe:	85 e0       	ldi	r24, 0x05	; 5
     400:	8a 95       	dec	r24
     402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
     404:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     406:	88 b1       	in	r24, 0x08	; 8
     408:	8f 77       	andi	r24, 0x7F	; 127
     40a:	88 b9       	out	0x08, r24	; 8
     40c:	95 e0       	ldi	r25, 0x05	; 5
     40e:	9a 95       	dec	r25
     410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     412:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     414:	8b cf       	rjmp	.-234    	; 0x32c <LCDBusyLoop>
     416:	08 95       	ret

00000418 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     418:	cf 93       	push	r28
     41a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41c:	2f ef       	ldi	r18, 0xFF	; 255
     41e:	86 e7       	ldi	r24, 0x76	; 118
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	21 50       	subi	r18, 0x01	; 1
     424:	80 40       	sbci	r24, 0x00	; 0
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	e1 f7       	brne	.-8      	; 0x422 <InitLCD+0xa>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <InitLCD+0x14>
     42c:	00 00       	nop

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     42e:	87 b1       	in	r24, 0x07	; 7
     430:	8f 60       	ori	r24, 0x0F	; 15
     432:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     434:	87 b1       	in	r24, 0x07	; 7
     436:	80 68       	ori	r24, 0x80	; 128
     438:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     43a:	87 b1       	in	r24, 0x07	; 7
     43c:	80 64       	ori	r24, 0x40	; 64
     43e:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     440:	87 b1       	in	r24, 0x07	; 7
     442:	80 62       	ori	r24, 0x20	; 32
     444:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     446:	88 b1       	in	r24, 0x08	; 8
     448:	80 7f       	andi	r24, 0xF0	; 240
     44a:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     44c:	88 b1       	in	r24, 0x08	; 8
     44e:	8f 77       	andi	r24, 0x7F	; 127
     450:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     452:	88 b1       	in	r24, 0x08	; 8
     454:	8f 7d       	andi	r24, 0xDF	; 223
     456:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     458:	88 b1       	in	r24, 0x08	; 8
     45a:	8f 7b       	andi	r24, 0xBF	; 191
     45c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45e:	00 c0       	rjmp	.+0      	; 0x460 <InitLCD+0x48>
     460:	00 c0       	rjmp	.+0      	; 0x462 <InitLCD+0x4a>
     462:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     464:	88 b1       	in	r24, 0x08	; 8
     466:	80 68       	ori	r24, 0x80	; 128
     468:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     46a:	88 b1       	in	r24, 0x08	; 8
     46c:	82 60       	ori	r24, 0x02	; 2
     46e:	88 b9       	out	0x08, r24	; 8
     470:	25 e0       	ldi	r18, 0x05	; 5
     472:	2a 95       	dec	r18
     474:	f1 f7       	brne	.-4      	; 0x472 <InitLCD+0x5a>
     476:	00 00       	nop
	_delay_us(1);

	CLEAR_E();
     478:	88 b1       	in	r24, 0x08	; 8
     47a:	8f 77       	andi	r24, 0x7F	; 127
     47c:	88 b9       	out	0x08, r24	; 8
     47e:	85 e0       	ldi	r24, 0x05	; 5
     480:	8a 95       	dec	r24
     482:	f1 f7       	brne	.-4      	; 0x480 <InitLCD+0x68>
     484:	00 00       	nop
	_delay_us(1);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     486:	52 df       	rcall	.-348    	; 0x32c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	8c 2f       	mov	r24, r28
     48c:	8c 60       	ori	r24, 0x0C	; 12
     48e:	8d df       	rcall	.-230    	; 0x3aa <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	88 e2       	ldi	r24, 0x28	; 40
     494:	8a df       	rcall	.-236    	; 0x3aa <LCDByte>
}
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	82 df       	rcall	.-252    	; 0x3aa <LCDByte>
	msg++;
     4a6:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     4a8:	88 81       	ld	r24, Y
     4aa:	81 11       	cpse	r24, r1
     4ac:	fa cf       	rjmp	.-12     	; 0x4a2 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <LCDWriteInt+0xe>
     4c2:	1f 92       	push	r1
     4c4:	1f 92       	push	r1
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     4cc:	fe 01       	movw	r30, r28
     4ce:	31 96       	adiw	r30, 0x01	; 1
     4d0:	25 e0       	ldi	r18, 0x05	; 5
     4d2:	df 01       	movw	r26, r30
     4d4:	1d 92       	st	X+, r1
     4d6:	2a 95       	dec	r18
     4d8:	e9 f7       	brne	.-6      	; 0x4d4 <LCDWriteInt+0x20>
	int i=4,j=0;
     4da:	24 e0       	ldi	r18, 0x04	; 4
     4dc:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     4de:	0e c0       	rjmp	.+28     	; 0x4fc <LCDWriteInt+0x48>
	{
	str[i]=val%10;
     4e0:	6a e0       	ldi	r22, 0x0A	; 10
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	d9 d7       	rcall	.+4018   	; 0x1498 <__divmodhi4>
     4e6:	e1 e0       	ldi	r30, 0x01	; 1
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	ec 0f       	add	r30, r28
     4ec:	fd 1f       	adc	r31, r29
     4ee:	e2 0f       	add	r30, r18
     4f0:	f3 1f       	adc	r31, r19
     4f2:	80 83       	st	Z, r24
	val=val/10;
     4f4:	86 2f       	mov	r24, r22
     4f6:	97 2f       	mov	r25, r23
	i--;
     4f8:	21 50       	subi	r18, 0x01	; 1
     4fa:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	81 f7       	brne	.-32     	; 0x4e0 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     500:	bf ef       	ldi	r27, 0xFF	; 255
     502:	eb 16       	cp	r14, r27
     504:	fb 06       	cpc	r15, r27
     506:	81 f4       	brne	.+32     	; 0x528 <LCDWriteInt+0x74>
     508:	03 c0       	rjmp	.+6      	; 0x510 <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
     50a:	0f 5f       	subi	r16, 0xFF	; 255
     50c:	1f 4f       	sbci	r17, 0xFF	; 255
     50e:	02 c0       	rjmp	.+4      	; 0x514 <LCDWriteInt+0x60>
     510:	00 e0       	ldi	r16, 0x00	; 0
     512:	10 e0       	ldi	r17, 0x00	; 0
     514:	e1 e0       	ldi	r30, 0x01	; 1
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	ec 0f       	add	r30, r28
     51a:	fd 1f       	adc	r31, r29
     51c:	e0 0f       	add	r30, r16
     51e:	f1 1f       	adc	r31, r17
     520:	20 81       	ld	r18, Z
     522:	22 23       	and	r18, r18
     524:	91 f3       	breq	.-28     	; 0x50a <LCDWriteInt+0x56>
     526:	04 c0       	rjmp	.+8      	; 0x530 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     528:	05 e0       	ldi	r16, 0x05	; 5
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	0e 19       	sub	r16, r14
     52e:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     530:	99 23       	and	r25, r25
     532:	84 f4       	brge	.+32     	; 0x554 <LCDWriteInt+0xa0>
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	8d e2       	ldi	r24, 0x2D	; 45
     538:	38 df       	rcall	.-400    	; 0x3aa <LCDByte>
     53a:	0c c0       	rjmp	.+24     	; 0x554 <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     53c:	e1 e0       	ldi	r30, 0x01	; 1
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	ec 0f       	add	r30, r28
     542:	fd 1f       	adc	r31, r29
     544:	e0 0f       	add	r30, r16
     546:	f1 1f       	adc	r31, r17
     548:	80 81       	ld	r24, Z
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	80 5d       	subi	r24, 0xD0	; 208
     54e:	2d df       	rcall	.-422    	; 0x3aa <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     550:	0f 5f       	subi	r16, 0xFF	; 255
     552:	1f 4f       	sbci	r17, 0xFF	; 255
     554:	05 30       	cpi	r16, 0x05	; 5
     556:	11 05       	cpc	r17, r1
     558:	8c f3       	brlt	.-30     	; 0x53c <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	08 95       	ret

00000572 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     572:	88 32       	cpi	r24, 0x28	; 40
     574:	28 f4       	brcc	.+10     	; 0x580 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     576:	61 11       	cpse	r22, r1
     578:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	80 68       	ori	r24, 0x80	; 128
     57e:	15 cf       	rjmp	.-470    	; 0x3aa <LCDByte>
     580:	08 95       	ret

00000582 <basic_step>:
//*########################################## FUNCTIONS ##########################################*//

// steps is how many steps, CW = 0 is CCW
// delay indicates how much time is between each step
void basic_step(unsigned char steps, unsigned char CW, unsigned short delay)
{
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	f8 2e       	mov	r15, r24
     58e:	d6 2f       	mov	r29, r22
     590:	8a 01       	movw	r16, r20
	for (unsigned char i = 0; i < steps; i++)
     592:	c0 e0       	ldi	r28, 0x00	; 0
     594:	33 c0       	rjmp	.+102    	; 0x5fc <basic_step+0x7a>
	{
		// move current_stepper_state to its next value based on CW parameter
		if (CW)
     596:	dd 23       	and	r29, r29
     598:	59 f0       	breq	.+22     	; 0x5b0 <basic_step+0x2e>
		{
			if (++current_stepper_state > 4) current_stepper_state = 1;
     59a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <current_stepper_state>
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <current_stepper_state>
     5a4:	85 30       	cpi	r24, 0x05	; 5
     5a6:	70 f0       	brcs	.+28     	; 0x5c4 <basic_step+0x42>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <current_stepper_state>
     5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <basic_step+0x42>
		}
		else if (--current_stepper_state < 1) current_stepper_state = 4;
     5b0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <current_stepper_state>
     5b4:	81 50       	subi	r24, 0x01	; 1
     5b6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <current_stepper_state>
     5ba:	81 11       	cpse	r24, r1
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <basic_step+0x42>
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <current_stepper_state>

		// determine what state to send the stepper motor
		     if (current_stepper_state == 1) PORTK = 0b00110110;
     5c4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <current_stepper_state>
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	21 f4       	brne	.+8      	; 0x5d4 <basic_step+0x52>
     5cc:	86 e3       	ldi	r24, 0x36	; 54
     5ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <basic_step+0x74>
		else if (current_stepper_state == 2) PORTK = 0b00101110;
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	21 f4       	brne	.+8      	; 0x5e0 <basic_step+0x5e>
     5d8:	8e e2       	ldi	r24, 0x2E	; 46
     5da:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     5de:	0b c0       	rjmp	.+22     	; 0x5f6 <basic_step+0x74>
		else if (current_stepper_state == 3) PORTK = 0b00101101;
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	21 f4       	brne	.+8      	; 0x5ec <basic_step+0x6a>
     5e4:	8d e2       	ldi	r24, 0x2D	; 45
     5e6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <basic_step+0x74>
		else if (current_stepper_state == 4) PORTK = 0b00110101;
     5ec:	84 30       	cpi	r24, 0x04	; 4
     5ee:	19 f4       	brne	.+6      	; 0x5f6 <basic_step+0x74>
     5f0:	85 e3       	ldi	r24, 0x35	; 53
     5f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>

		mTimer(delay); // delay between each step
     5f6:	c8 01       	movw	r24, r16
     5f8:	a5 dd       	rcall	.-1206   	; 0x144 <mTimer>

// steps is how many steps, CW = 0 is CCW
// delay indicates how much time is between each step
void basic_step(unsigned char steps, unsigned char CW, unsigned short delay)
{
	for (unsigned char i = 0; i < steps; i++)
     5fa:	cf 5f       	subi	r28, 0xFF	; 255
     5fc:	cf 15       	cp	r28, r15
     5fe:	58 f2       	brcs	.-106    	; 0x596 <basic_step+0x14>
		else if (current_stepper_state == 4) PORTK = 0b00110101;

		mTimer(delay); // delay between each step
	}

	last_moving_CW = CW;
     600:	d0 93 07 02 	sts	0x0207, r29	; 0x800207 <last_moving_CW>
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	08 95       	ret

00000610 <stepper_move>:

void stepper_move(unsigned char desired_bucket)
{
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	08 2f       	mov	r16, r24
	if (desired_bucket < 1 || desired_bucket > 4)
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	80 0f       	add	r24, r16
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	18 f1       	brcs	.+70     	; 0x670 <stepper_move+0x60>
	{
		DISABLE_MOTORS();
     62a:	8c e0       	ldi	r24, 0x0C	; 12
     62c:	85 b9       	out	0x05, r24	; 5
     62e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		LCDWriteStringXY(0, 0, "BUCKET REQ ERR  ");
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	9d df       	rcall	.-198    	; 0x572 <LCDGotoXY>
     638:	82 e1       	ldi	r24, 0x12	; 18
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	2e df       	rcall	.-420    	; 0x49a <LCDWriteString>
		LCDWriteStringXY(0, 1, "CB=   DB=       ");
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	97 df       	rcall	.-210    	; 0x572 <LCDGotoXY>
     644:	83 e2       	ldi	r24, 0x23	; 35
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	28 df       	rcall	.-432    	; 0x49a <LCDWriteString>
		LCDWriteIntXY(3,1,current_bucket,2);
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	91 df       	rcall	.-222    	; 0x572 <LCDGotoXY>
     650:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <current_bucket>
     654:	62 e0       	ldi	r22, 0x02	; 2
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	2c df       	rcall	.-424    	; 0x4b4 <LCDWriteInt>
		LCDWriteIntXY(9,1,desired_bucket,2);
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	89 e0       	ldi	r24, 0x09	; 9
     660:	88 df       	rcall	.-240    	; 0x572 <LCDGotoXY>
     662:	62 e0       	ldi	r22, 0x02	; 2
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 2f       	mov	r24, r16
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	24 df       	rcall	.-440    	; 0x4b4 <LCDWriteInt>
		flashPortL(0);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	ba dd       	rcall	.-1164   	; 0x1e4 <flashPortL>
     670:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <last_moving_CW>
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
     674:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <current_bucket>
	unsigned char steps_to_move = 50;
	
	if (current_bucket == desired_bucket) return;
     678:	08 17       	cp	r16, r24
     67a:	09 f4       	brne	.+2      	; 0x67e <stepper_move+0x6e>
     67c:	e0 c0       	rjmp	.+448    	; 0x83e <stepper_move+0x22e>
     67e:	81 30       	cpi	r24, 0x01	; 1
	
	else if (current_bucket == 1) // ALUMINUM
     680:	59 f4       	brne	.+22     	; 0x698 <stepper_move+0x88>
     682:	02 30       	cpi	r16, 0x02	; 2
	{
		     if (desired_bucket == 2) steps_to_move = 100; // S
     684:	09 f4       	brne	.+2      	; 0x688 <stepper_move+0x78>
     686:	54 c0       	rjmp	.+168    	; 0x730 <stepper_move+0x120>
     688:	03 30       	cpi	r16, 0x03	; 3
		else if (desired_bucket == 3) move_CW = 1; // W
     68a:	09 f4       	brne	.+2      	; 0x68e <stepper_move+0x7e>
     68c:	53 c0       	rjmp	.+166    	; 0x734 <stepper_move+0x124>
     68e:	04 30       	cpi	r16, 0x04	; 4
		else if (desired_bucket == 4) move_CW = 0; // B
     690:	09 f4       	brne	.+2      	; 0x694 <stepper_move+0x84>
     692:	53 c0       	rjmp	.+166    	; 0x73a <stepper_move+0x12a>
     694:	d2 e3       	ldi	r29, 0x32	; 50
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     696:	6b c0       	rjmp	.+214    	; 0x76e <stepper_move+0x15e>
     698:	82 30       	cpi	r24, 0x02	; 2
		     if (desired_bucket == 2) steps_to_move = 100; // S
		else if (desired_bucket == 3) move_CW = 1; // W
		else if (desired_bucket == 4) move_CW = 0; // B
	}
	
	else if (current_bucket == 2) // STEEL
     69a:	59 f4       	brne	.+22     	; 0x6b2 <stepper_move+0xa2>
     69c:	01 30       	cpi	r16, 0x01	; 1
	{
		     if (desired_bucket == 1) steps_to_move = 100; // A
     69e:	09 f4       	brne	.+2      	; 0x6a2 <stepper_move+0x92>
     6a0:	4f c0       	rjmp	.+158    	; 0x740 <stepper_move+0x130>
     6a2:	03 30       	cpi	r16, 0x03	; 3
		else if (desired_bucket == 3) move_CW = 0; // W
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <stepper_move+0x98>
     6a6:	4e c0       	rjmp	.+156    	; 0x744 <stepper_move+0x134>
     6a8:	04 30       	cpi	r16, 0x04	; 4
		else if (desired_bucket == 4) move_CW = 1; // B
     6aa:	09 f4       	brne	.+2      	; 0x6ae <stepper_move+0x9e>
     6ac:	4e c0       	rjmp	.+156    	; 0x74a <stepper_move+0x13a>
     6ae:	d2 e3       	ldi	r29, 0x32	; 50
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     6b0:	5e c0       	rjmp	.+188    	; 0x76e <stepper_move+0x15e>
     6b2:	83 30       	cpi	r24, 0x03	; 3
		     if (desired_bucket == 1) steps_to_move = 100; // A
		else if (desired_bucket == 3) move_CW = 0; // W
		else if (desired_bucket == 4) move_CW = 1; // B
	}
	
	else if (current_bucket == 3) // WHITE
     6b4:	59 f4       	brne	.+22     	; 0x6cc <stepper_move+0xbc>
     6b6:	04 30       	cpi	r16, 0x04	; 4
	{
		     if (desired_bucket == 4) steps_to_move = 100; // B
     6b8:	09 f4       	brne	.+2      	; 0x6bc <stepper_move+0xac>
     6ba:	4a c0       	rjmp	.+148    	; 0x750 <stepper_move+0x140>
     6bc:	01 30       	cpi	r16, 0x01	; 1
		else if (desired_bucket == 1) move_CW = 0; // A
     6be:	09 f4       	brne	.+2      	; 0x6c2 <stepper_move+0xb2>
     6c0:	49 c0       	rjmp	.+146    	; 0x754 <stepper_move+0x144>
     6c2:	02 30       	cpi	r16, 0x02	; 2
		else if (desired_bucket == 2) move_CW = 1; // S
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <stepper_move+0xb8>
     6c6:	49 c0       	rjmp	.+146    	; 0x75a <stepper_move+0x14a>
     6c8:	d2 e3       	ldi	r29, 0x32	; 50
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     6ca:	51 c0       	rjmp	.+162    	; 0x76e <stepper_move+0x15e>
     6cc:	84 30       	cpi	r24, 0x04	; 4
		     if (desired_bucket == 4) steps_to_move = 100; // B
		else if (desired_bucket == 1) move_CW = 0; // A
		else if (desired_bucket == 2) move_CW = 1; // S
	}
	
	else if (current_bucket == 4) // BLACK
     6ce:	59 f4       	brne	.+22     	; 0x6e6 <stepper_move+0xd6>
     6d0:	03 30       	cpi	r16, 0x03	; 3
	{
		     if (desired_bucket == 3) steps_to_move = 100; // W
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <stepper_move+0xc6>
     6d4:	45 c0       	rjmp	.+138    	; 0x760 <stepper_move+0x150>
     6d6:	01 30       	cpi	r16, 0x01	; 1
		else if (desired_bucket == 1) move_CW = 1; // A
     6d8:	09 f4       	brne	.+2      	; 0x6dc <stepper_move+0xcc>
     6da:	44 c0       	rjmp	.+136    	; 0x764 <stepper_move+0x154>
     6dc:	02 30       	cpi	r16, 0x02	; 2
		else if (desired_bucket == 2) move_CW = 0; // S
     6de:	09 f4       	brne	.+2      	; 0x6e2 <stepper_move+0xd2>
     6e0:	44 c0       	rjmp	.+136    	; 0x76a <stepper_move+0x15a>
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     6e2:	d2 e3       	ldi	r29, 0x32	; 50
     6e4:	44 c0       	rjmp	.+136    	; 0x76e <stepper_move+0x15e>
	else if (current_bucket == 4 && desired_bucket == 2) move_CW = 0; // B -> S
	*/
	
	else
	{
		DISABLE_MOTORS();
     6e6:	8c e0       	ldi	r24, 0x0C	; 12
     6e8:	85 b9       	out	0x05, r24	; 5
     6ea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		LCDWriteStringXY(0, 0, "STEPPER CASE ERR");
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	3f df       	rcall	.-386    	; 0x572 <LCDGotoXY>
     6f4:	84 e3       	ldi	r24, 0x34	; 52
     6f6:	92 e0       	ldi	r25, 0x02	; 2
		LCDWriteStringXY(0, 1, "CB=   DB=       ");
     6f8:	d0 de       	rcall	.-608    	; 0x49a <LCDWriteString>
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	39 df       	rcall	.-398    	; 0x572 <LCDGotoXY>
     700:	83 e2       	ldi	r24, 0x23	; 35
     702:	92 e0       	ldi	r25, 0x02	; 2
		LCDWriteIntXY(3,1,current_bucket,2);
     704:	ca de       	rcall	.-620    	; 0x49a <LCDWriteString>
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	33 df       	rcall	.-410    	; 0x572 <LCDGotoXY>
     70c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <current_bucket>
     710:	62 e0       	ldi	r22, 0x02	; 2
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
		LCDWriteIntXY(9,1,desired_bucket,2);
     716:	ce de       	rcall	.-612    	; 0x4b4 <LCDWriteInt>
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	89 e0       	ldi	r24, 0x09	; 9
     71c:	2a df       	rcall	.-428    	; 0x572 <LCDGotoXY>
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	80 2f       	mov	r24, r16
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	c6 de       	rcall	.-628    	; 0x4b4 <LCDWriteInt>
     728:	80 e0       	ldi	r24, 0x00	; 0
		flashPortL(0);
     72a:	5c dd       	rcall	.-1352   	; 0x1e4 <flashPortL>
     72c:	d2 e3       	ldi	r29, 0x32	; 50
     72e:	1f c0       	rjmp	.+62     	; 0x76e <stepper_move+0x15e>
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     730:	d4 e6       	ldi	r29, 0x64	; 100
     732:	1d c0       	rjmp	.+58     	; 0x76e <stepper_move+0x15e>
	
	if (current_bucket == desired_bucket) return;
	
	else if (current_bucket == 1) // ALUMINUM
	{
		     if (desired_bucket == 2) steps_to_move = 100; // S
     734:	d2 e3       	ldi	r29, 0x32	; 50
     736:	11 e0       	ldi	r17, 0x01	; 1
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     738:	1a c0       	rjmp	.+52     	; 0x76e <stepper_move+0x15e>
	if (current_bucket == desired_bucket) return;
	
	else if (current_bucket == 1) // ALUMINUM
	{
		     if (desired_bucket == 2) steps_to_move = 100; // S
		else if (desired_bucket == 3) move_CW = 1; // W
     73a:	d2 e3       	ldi	r29, 0x32	; 50
     73c:	10 e0       	ldi	r17, 0x00	; 0
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     73e:	17 c0       	rjmp	.+46     	; 0x76e <stepper_move+0x15e>
	
	else if (current_bucket == 1) // ALUMINUM
	{
		     if (desired_bucket == 2) steps_to_move = 100; // S
		else if (desired_bucket == 3) move_CW = 1; // W
		else if (desired_bucket == 4) move_CW = 0; // B
     740:	d4 e6       	ldi	r29, 0x64	; 100
     742:	15 c0       	rjmp	.+42     	; 0x76e <stepper_move+0x15e>
	}
	
	else if (current_bucket == 2) // STEEL
	{
		     if (desired_bucket == 1) steps_to_move = 100; // A
     744:	d2 e3       	ldi	r29, 0x32	; 50
     746:	10 e0       	ldi	r17, 0x00	; 0
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     748:	12 c0       	rjmp	.+36     	; 0x76e <stepper_move+0x15e>
	}
	
	else if (current_bucket == 2) // STEEL
	{
		     if (desired_bucket == 1) steps_to_move = 100; // A
		else if (desired_bucket == 3) move_CW = 0; // W
     74a:	d2 e3       	ldi	r29, 0x32	; 50
     74c:	11 e0       	ldi	r17, 0x01	; 1
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     74e:	0f c0       	rjmp	.+30     	; 0x76e <stepper_move+0x15e>
	
	else if (current_bucket == 2) // STEEL
	{
		     if (desired_bucket == 1) steps_to_move = 100; // A
		else if (desired_bucket == 3) move_CW = 0; // W
		else if (desired_bucket == 4) move_CW = 1; // B
     750:	d4 e6       	ldi	r29, 0x64	; 100
     752:	0d c0       	rjmp	.+26     	; 0x76e <stepper_move+0x15e>
	}
	
	else if (current_bucket == 3) // WHITE
	{
		     if (desired_bucket == 4) steps_to_move = 100; // B
     754:	d2 e3       	ldi	r29, 0x32	; 50
     756:	10 e0       	ldi	r17, 0x00	; 0
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     758:	0a c0       	rjmp	.+20     	; 0x76e <stepper_move+0x15e>
	}
	
	else if (current_bucket == 3) // WHITE
	{
		     if (desired_bucket == 4) steps_to_move = 100; // B
		else if (desired_bucket == 1) move_CW = 0; // A
     75a:	d2 e3       	ldi	r29, 0x32	; 50
     75c:	11 e0       	ldi	r17, 0x01	; 1
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     75e:	07 c0       	rjmp	.+14     	; 0x76e <stepper_move+0x15e>
	
	else if (current_bucket == 3) // WHITE
	{
		     if (desired_bucket == 4) steps_to_move = 100; // B
		else if (desired_bucket == 1) move_CW = 0; // A
		else if (desired_bucket == 2) move_CW = 1; // S
     760:	d4 e6       	ldi	r29, 0x64	; 100
	}
	
	else if (current_bucket == 4) // BLACK
	{
		     if (desired_bucket == 3) steps_to_move = 100; // W
     762:	05 c0       	rjmp	.+10     	; 0x76e <stepper_move+0x15e>
     764:	d2 e3       	ldi	r29, 0x32	; 50
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     766:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	else if (current_bucket == 4) // BLACK
	{
		     if (desired_bucket == 3) steps_to_move = 100; // W
		else if (desired_bucket == 1) move_CW = 1; // A
     768:	02 c0       	rjmp	.+4      	; 0x76e <stepper_move+0x15e>
		flashPortL(0);
	}
	
	// set defaults for move_CW and # steps to move
	unsigned char move_CW = last_moving_CW;
	unsigned char steps_to_move = 50;
     76a:	d2 e3       	ldi	r29, 0x32	; 50
	
	else if (current_bucket == 4) // BLACK
	{
		     if (desired_bucket == 3) steps_to_move = 100; // W
		else if (desired_bucket == 1) move_CW = 1; // A
		else if (desired_bucket == 2) move_CW = 0; // S
     76c:	10 e0       	ldi	r17, 0x00	; 0
		flashPortL(0);
	}

	// move stepper
	unsigned char delay = MAX_STEP_DELAY;
	for (unsigned char i = 0; i < steps_to_move; i++)
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	5f c0       	rjmp	.+190    	; 0x830 <stepper_move+0x220>
	{
		// calculate delay in an S curve
		delay = ((MAX_STEP_DELAY-MIN_STEP_DELAY)/2)*sin(2*i*PI/steps_to_move+PI/2) + (MAX_STEP_DELAY+MIN_STEP_DELAY)/2;
     772:	6c 2f       	mov	r22, r28
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	66 0f       	add	r22, r22
     778:	77 1f       	adc	r23, r23
     77a:	07 2e       	mov	r0, r23
     77c:	00 0c       	add	r0, r0
     77e:	88 0b       	sbc	r24, r24
     780:	99 0b       	sbc	r25, r25
     782:	f0 d4       	rcall	.+2528   	; 0x1164 <__floatsisf>
     784:	2b ed       	ldi	r18, 0xDB	; 219
     786:	3f e0       	ldi	r19, 0x0F	; 15
     788:	49 e4       	ldi	r20, 0x49	; 73
     78a:	50 e4       	ldi	r21, 0x40	; 64
     78c:	9f d5       	rcall	.+2878   	; 0x12cc <__mulsf3>
     78e:	6b 01       	movw	r12, r22
     790:	7c 01       	movw	r14, r24
     792:	6d 2f       	mov	r22, r29
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	e4 d4       	rcall	.+2504   	; 0x1164 <__floatsisf>
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	44 d4       	rcall	.+2184   	; 0x102e <__divsf3>
     7a6:	2b ed       	ldi	r18, 0xDB	; 219
     7a8:	3f e0       	ldi	r19, 0x0F	; 15
     7aa:	49 ec       	ldi	r20, 0xC9	; 201
     7ac:	5f e3       	ldi	r21, 0x3F	; 63
     7ae:	d7 d3       	rcall	.+1966   	; 0xf5e <__addsf3>
     7b0:	f0 d5       	rcall	.+3040   	; 0x1392 <sin>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 ea       	ldi	r20, 0xA0	; 160
     7b8:	50 e4       	ldi	r21, 0x40	; 64
     7ba:	88 d5       	rcall	.+2832   	; 0x12cc <__mulsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e1       	ldi	r20, 0x10	; 16
     7c2:	51 e4       	ldi	r21, 0x41	; 65
     7c4:	cc d3       	rcall	.+1944   	; 0xf5e <__addsf3>
     7c6:	a0 d4       	rcall	.+2368   	; 0x1108 <__fixunssfsi>
     7c8:	11 23       	and	r17, r17
     7ca:	59 f0       	breq	.+22     	; 0x7e2 <stepper_move+0x1d2>

		// move current_stepper_state to its next value based on CW parameter
		if (move_CW)
     7cc:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <current_stepper_state>
		{
			if (++current_stepper_state > 4) current_stepper_state = 1;
     7d0:	9f 5f       	subi	r25, 0xFF	; 255
     7d2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <current_stepper_state>
     7d6:	95 30       	cpi	r25, 0x05	; 5
     7d8:	70 f0       	brcs	.+28     	; 0x7f6 <stepper_move+0x1e6>
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <current_stepper_state>
     7e0:	0a c0       	rjmp	.+20     	; 0x7f6 <stepper_move+0x1e6>
     7e2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <current_stepper_state>
		}
		else if (--current_stepper_state < 1) current_stepper_state = 4;
     7e6:	91 50       	subi	r25, 0x01	; 1
     7e8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <current_stepper_state>
     7ec:	91 11       	cpse	r25, r1
     7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <stepper_move+0x1e6>
     7f0:	84 e0       	ldi	r24, 0x04	; 4
     7f2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <current_stepper_state>
     7f6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <current_stepper_state>

		// determine what state to send the stepper motor
		     if (current_stepper_state == 1) PORTK = 0b00110110;
     7fa:	91 30       	cpi	r25, 0x01	; 1
     7fc:	21 f4       	brne	.+8      	; 0x806 <stepper_move+0x1f6>
     7fe:	86 e3       	ldi	r24, 0x36	; 54
     800:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     804:	11 c0       	rjmp	.+34     	; 0x828 <stepper_move+0x218>
     806:	92 30       	cpi	r25, 0x02	; 2
		else if (current_stepper_state == 2) PORTK = 0b00101110;
     808:	21 f4       	brne	.+8      	; 0x812 <stepper_move+0x202>
     80a:	8e e2       	ldi	r24, 0x2E	; 46
     80c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     810:	0b c0       	rjmp	.+22     	; 0x828 <stepper_move+0x218>
     812:	93 30       	cpi	r25, 0x03	; 3
		else if (current_stepper_state == 3) PORTK = 0b00101101;
     814:	21 f4       	brne	.+8      	; 0x81e <stepper_move+0x20e>
     816:	8d e2       	ldi	r24, 0x2D	; 45
     818:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     81c:	05 c0       	rjmp	.+10     	; 0x828 <stepper_move+0x218>
     81e:	94 30       	cpi	r25, 0x04	; 4
		else if (current_stepper_state == 4) PORTK = 0b00110101;
     820:	19 f4       	brne	.+6      	; 0x828 <stepper_move+0x218>
     822:	85 e3       	ldi	r24, 0x35	; 53
     824:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     828:	86 2f       	mov	r24, r22

		mTimer(delay); // delay between each step
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	8b dc       	rcall	.-1770   	; 0x144 <mTimer>
     82e:	cf 5f       	subi	r28, 0xFF	; 255
     830:	cd 17       	cp	r28, r29
		flashPortL(0);
	}

	// move stepper
	unsigned char delay = MAX_STEP_DELAY;
	for (unsigned char i = 0; i < steps_to_move; i++)
     832:	08 f4       	brcc	.+2      	; 0x836 <stepper_move+0x226>
     834:	9e cf       	rjmp	.-196    	; 0x772 <stepper_move+0x162>
     836:	10 93 07 02 	sts	0x0207, r17	; 0x800207 <last_moving_CW>
		else if (current_stepper_state == 4) PORTK = 0b00110101;

		mTimer(delay); // delay between each step
	}

	last_moving_CW = move_CW;
     83a:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <current_bucket>
	current_bucket = desired_bucket;
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
}
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	08 95       	ret

00000850 <add_to_queue>:
     850:	cf 93       	push	r28
     852:	9f ef       	ldi	r25, 0xFF	; 255

// - adds a value to a predefined global fifo queue
unsigned char add_to_queue(unsigned char value)
{
	// if number was not valid, return 0
	if (value < 1 || value > 4) return 0;
     854:	98 0f       	add	r25, r24
     856:	94 30       	cpi	r25, 0x04	; 4
     858:	30 f5       	brcc	.+76     	; 0x8a6 <add_to_queue+0x56>
     85a:	c8 2f       	mov	r28, r24

	// add value to the queue
	link *newLink = malloc(sizeof(link));
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	42 d6       	rcall	.+3204   	; 0x14e6 <malloc>
	newLink->piece_code = value;
     862:	fc 01       	movw	r30, r24
     864:	c0 83       	st	Z, r28
	newLink->next = NULL;
     866:	12 82       	std	Z+2, r1	; 0x02
     868:	11 82       	std	Z+1, r1	; 0x01

	if (queue_head != NULL && queue_tail != NULL)
     86a:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <queue_head>
     86e:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <queue_head+0x1>
     872:	23 2b       	or	r18, r19
     874:	71 f0       	breq	.+28     	; 0x892 <add_to_queue+0x42>
     876:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <__data_end>
     87a:	f0 91 25 03 	lds	r31, 0x0325	; 0x800325 <__data_end+0x1>
     87e:	30 97       	sbiw	r30, 0x00	; 0
     880:	41 f0       	breq	.+16     	; 0x892 <add_to_queue+0x42>
	{
		queue_tail->next = newLink;
     882:	92 83       	std	Z+2, r25	; 0x02
     884:	81 83       	std	Z+1, r24	; 0x01
		queue_tail = newLink;
     886:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <__data_end+0x1>
     88a:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <__data_end>
		queue_head = newLink;
		queue_tail = newLink;
	}

	// if it worked, return 1
	return 1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
	newLink->next = NULL;

	if (queue_head != NULL && queue_tail != NULL)
	{
		queue_tail->next = newLink;
		queue_tail = newLink;
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <add_to_queue+0x58>
	}
	else
	{
		queue_head = newLink;
     892:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <queue_head+0x1>
     896:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <queue_head>
		queue_tail = newLink;
     89a:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <__data_end+0x1>
     89e:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <__data_end>
	}

	// if it worked, return 1
	return 1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <add_to_queue+0x58>

// - adds a value to a predefined global fifo queue
unsigned char add_to_queue(unsigned char value)
{
	// if number was not valid, return 0
	if (value < 1 || value > 4) return 0;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
		queue_tail = newLink;
	}

	// if it worked, return 1
	return 1;
}
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <sizeofqueue>:

unsigned short sizeofqueue()
{
	unsigned short return_value = 0;
	link *temp_ptr = queue_head;
     8ac:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <queue_head>
     8b0:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <queue_head+0x1>
	return 1;
}

unsigned short sizeofqueue()
{
	unsigned short return_value = 0;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
	link *temp_ptr = queue_head;

	while(temp_ptr != NULL)
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <sizeofqueue+0x16>
	{
		return_value++;
     8ba:	01 96       	adiw	r24, 0x01	; 1
		temp_ptr = temp_ptr->next;
     8bc:	01 80       	ldd	r0, Z+1	; 0x01
     8be:	f2 81       	ldd	r31, Z+2	; 0x02
     8c0:	e0 2d       	mov	r30, r0
unsigned short sizeofqueue()
{
	unsigned short return_value = 0;
	link *temp_ptr = queue_head;

	while(temp_ptr != NULL)
     8c2:	30 97       	sbiw	r30, 0x00	; 0
     8c4:	d1 f7       	brne	.-12     	; 0x8ba <sizeofqueue+0xe>
		return_value++;
		temp_ptr = temp_ptr->next;
	}

	return return_value;
}
     8c6:	08 95       	ret

000008c8 <main>:
//*############################################ MAIN #############################################*//

int main()
{
	// - calculate part classifying variables if not manually declared in global variables
	if (!ALUMINUM_STEEL_MIDPOINT) ALUMINUM_STEEL_MIDPOINT = (ALUMINUM_AVG + STEEL_AVG) / 2;
     8c8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <ALUMINUM_STEEL_MIDPOINT>
     8cc:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <ALUMINUM_STEEL_MIDPOINT+0x1>
     8d0:	89 2b       	or	r24, r25
     8d2:	31 f4       	brne	.+12     	; 0x8e0 <main+0x18>
     8d4:	87 ec       	ldi	r24, 0xC7	; 199
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <ALUMINUM_STEEL_MIDPOINT+0x1>
     8dc:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <ALUMINUM_STEEL_MIDPOINT>
	if (!STEEL_WHITE_MIDPOINT) STEEL_WHITE_MIDPOINT = (STEEL_AVG + WHITE_AVG) / 2;
     8e0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <STEEL_WHITE_MIDPOINT>
     8e4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <STEEL_WHITE_MIDPOINT+0x1>
     8e8:	89 2b       	or	r24, r25
     8ea:	31 f4       	brne	.+12     	; 0x8f8 <main+0x30>
     8ec:	87 e2       	ldi	r24, 0x27	; 39
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <STEEL_WHITE_MIDPOINT+0x1>
     8f4:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <STEEL_WHITE_MIDPOINT>
	if (!WHITE_BLACK_MIDPOINT) WHITE_BLACK_MIDPOINT = (WHITE_AVG + BLACK_AVG) / 2;
     8f8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <WHITE_BLACK_MIDPOINT>
     8fc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <WHITE_BLACK_MIDPOINT+0x1>
     900:	89 2b       	or	r24, r25
     902:	31 f4       	brne	.+12     	; 0x910 <main+0x48>
     904:	85 eb       	ldi	r24, 0xB5	; 181
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <WHITE_BLACK_MIDPOINT+0x1>
     90c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <WHITE_BLACK_MIDPOINT>
	// - SET SYSTEM CLOCK TO: 8 MHz
	//CLKPR = 0x80;
	//CLKPR = 0x01; // set clock prescalar to 2

	// - CONFIGURE EXT INTERRUPTS
	EIMSK |= _BV(INT2); // enable INT2 (PD2 / 19)
     910:	8d b3       	in	r24, 0x1d	; 29
     912:	84 60       	ori	r24, 0x04	; 4
     914:	8d bb       	out	0x1d, r24	; 29
	EIMSK |= _BV(INT3); // enable INT3 (PD3 / 18)
     916:	8d b3       	in	r24, 0x1d	; 29
     918:	88 60       	ori	r24, 0x08	; 8
     91a:	8d bb       	out	0x1d, r24	; 29
	// set falling edge of INT2 and INT3 to generate an interrupt request
	EICRA = 0b10100000; // ISC3 = 0b10 and ISC2 = 0b10
     91c:	80 ea       	ldi	r24, 0xA0	; 160
     91e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>

	// - SET PORT MODES
	DDRL = 0xFF; // sets all pins on PORTL to output (for debug)
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA = 0x00; // sets all pins on PINA  to  input (for sensors)
     928:	11 b8       	out	0x01, r1	; 1
	DDRD = 0x00; // sets all pins on PIND  to  input (for interrupts)
     92a:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF; // sets all pins on PORTB to output (for PWM and belt control)
     92c:	84 b9       	out	0x04, r24	; 4
	DDRK = 0xFF; // sets all pins on PORTK to output (for stepper motor control)
     92e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>

	// - VALIDATE LCD MODULE
	InitLCD(LS_BLINK | LS_ULINE);
     932:	83 e0       	ldi	r24, 0x03	; 3
     934:	71 dd       	rcall	.-1310   	; 0x418 <InitLCD>
	LCDClear();
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	37 dd       	rcall	.-1426   	; 0x3aa <LCDByte>
	LCDWriteStringXY(0, 0, "--INITIALIZING--");
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	18 de       	rcall	.-976    	; 0x572 <LCDGotoXY>
     942:	85 e4       	ldi	r24, 0x45	; 69
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	a9 dd       	rcall	.-1198   	; 0x49a <LCDWriteString>
	LCDWriteStringXY(0, 1, "-----BUCKET-----");
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	12 de       	rcall	.-988    	; 0x572 <LCDGotoXY>
     94e:	86 e5       	ldi	r24, 0x56	; 86
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	a3 dd       	rcall	.-1210   	; 0x49a <LCDWriteString>

	// - initialize stepper motor (unplug HE to bypass)
	unsigned char d = 20;
	basic_step(30,1,d);
     954:	44 e1       	ldi	r20, 0x14	; 20
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	8e e1       	ldi	r24, 0x1E	; 30
     95c:	12 de       	rcall	.-988    	; 0x582 <basic_step>
     95e:	80 b1       	in	r24, 0x00	; 0
	// move stepper until hall effect sensor activates (LOW)
	PINA_input = PINA;
     960:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <PINA_input>
     964:	64 e1       	ldi	r22, 0x14	; 20
	while ((PINA_input & (1 << 2)))
     966:	17 c0       	rjmp	.+46     	; 0x996 <main+0xce>
	{
		basic_step(1,1,d);
     968:	c6 2f       	mov	r28, r22
     96a:	d0 e0       	ldi	r29, 0x00	; 0
     96c:	ae 01       	movw	r20, r28
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	07 de       	rcall	.-1010   	; 0x582 <basic_step>
		if ((d /= 1.1) < 8) d = 8;
     974:	be 01       	movw	r22, r28
     976:	dd 0f       	add	r29, r29
     978:	88 0b       	sbc	r24, r24
     97a:	99 0b       	sbc	r25, r25
     97c:	f3 d3       	rcall	.+2022   	; 0x1164 <__floatsisf>
     97e:	2d ec       	ldi	r18, 0xCD	; 205
     980:	3c ec       	ldi	r19, 0xCC	; 204
     982:	4c e8       	ldi	r20, 0x8C	; 140
     984:	5f e3       	ldi	r21, 0x3F	; 63
     986:	53 d3       	rcall	.+1702   	; 0x102e <__divsf3>
     988:	bf d3       	rcall	.+1918   	; 0x1108 <__fixunssfsi>
     98a:	68 30       	cpi	r22, 0x08	; 8
     98c:	08 f4       	brcc	.+2      	; 0x990 <main+0xc8>
     98e:	68 e0       	ldi	r22, 0x08	; 8
     990:	80 b1       	in	r24, 0x00	; 0
		PINA_input = PINA;
     992:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <PINA_input>
	// - initialize stepper motor (unplug HE to bypass)
	unsigned char d = 20;
	basic_step(30,1,d);
	// move stepper until hall effect sensor activates (LOW)
	PINA_input = PINA;
	while ((PINA_input & (1 << 2)))
     996:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <PINA_input>
     99a:	82 fd       	sbrc	r24, 2
		if ((d /= 1.1) < 8) d = 8;
		PINA_input = PINA;
	}
	// ! bucket now at black
	
	LCDWriteStringXY(0, 0, "-^------^-------");
     99c:	e5 cf       	rjmp	.-54     	; 0x968 <main+0xa0>
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	e7 dd       	rcall	.-1074   	; 0x572 <LCDGotoXY>
     9a4:	87 e6       	ldi	r24, 0x67	; 103
	LCDWriteStringXY(0, 1, "END    PAUSE    ");
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	78 dd       	rcall	.-1296   	; 0x49a <LCDWriteString>
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	e1 dd       	rcall	.-1086   	; 0x572 <LCDGotoXY>
     9b0:	88 e7       	ldi	r24, 0x78	; 120
	mTimer(200);
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	72 dd       	rcall	.-1308   	; 0x49a <LCDWriteString>
     9b6:	88 ec       	ldi	r24, 0xC8	; 200
     9b8:	90 e0       	ldi	r25, 0x00	; 0

	// start the ADC in free run mode
	startADC();
     9ba:	c4 db       	rcall	.-2168   	; 0x144 <mTimer>
     9bc:	fd db       	rcall	.-2054   	; 0x1b8 <startADC>

	// start the conveyor belt
	startPWM(PERCENT_BELT_SPEED);
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	82 e8       	ldi	r24, 0x82	; 130
     9c4:	92 e4       	ldi	r25, 0x42	; 66
     9c6:	36 dc       	rcall	.-1940   	; 0x234 <startPWM>
     9c8:	8f e0       	ldi	r24, 0x0F	; 15
	BELT_STOP();
     9ca:	85 b9       	out	0x05, r24	; 5
	mTimer(5);
     9cc:	85 e0       	ldi	r24, 0x05	; 5
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	b9 db       	rcall	.-2190   	; 0x144 <mTimer>

	// * main loop

	while (1)
	{
		if (!pause)
     9d2:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <pause>
     9d6:	81 11       	cpse	r24, r1
		{
			PINA_input = PINA; // read PINA		
     9d8:	ca c1       	rjmp	.+916    	; 0xd6e <main+0x4a6>
     9da:	80 b1       	in	r24, 0x00	; 0
			
			if (was_paused)
     9dc:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <PINA_input>
     9e0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <was_paused>
			{
				LCDWriteStringXY(0, 0, "last=X-#### QD=#");
     9e4:	88 23       	and	r24, r24
     9e6:	09 f4       	brne	.+2      	; 0x9ea <main+0x122>
     9e8:	60 c0       	rjmp	.+192    	; 0xaaa <main+0x1e2>
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
				LCDWriteStringXY(0, 1, "next=  sorted=  ");
     9ee:	c1 dd       	rcall	.-1150   	; 0x572 <LCDGotoXY>
     9f0:	89 e8       	ldi	r24, 0x89	; 137
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	52 dd       	rcall	.-1372   	; 0x49a <LCDWriteString>
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	80 e0       	ldi	r24, 0x00	; 0
				LCDWriteIntXY(5, 0, most_recent_part, 1);
     9fa:	bb dd       	rcall	.-1162   	; 0x572 <LCDGotoXY>
     9fc:	8a e9       	ldi	r24, 0x9A	; 154
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	4c dd       	rcall	.-1384   	; 0x49a <LCDWriteString>
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	85 e0       	ldi	r24, 0x05	; 5
     a06:	b5 dd       	rcall	.-1174   	; 0x572 <LCDGotoXY>
     a08:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <most_recent_part>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	70 e0       	ldi	r23, 0x00	; 0
				LCDWriteIntXY(15, 0, sizeofqueue(), 1);
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	50 dd       	rcall	.-1376   	; 0x4b4 <LCDWriteInt>
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	8f e0       	ldi	r24, 0x0F	; 15
     a18:	ac dd       	rcall	.-1192   	; 0x572 <LCDGotoXY>
     a1a:	48 df       	rcall	.-368    	; 0x8ac <sizeofqueue>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	49 dd       	rcall	.-1390   	; 0x4b4 <LCDWriteInt>
				LCDWriteIntXY(14, 1, TOTAL_SORTED, 2);
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	8e e0       	ldi	r24, 0x0E	; 14
     a26:	a5 dd       	rcall	.-1206   	; 0x572 <LCDGotoXY>
     a28:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <a_sorted>
     a2c:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <s_sorted>
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	82 0f       	add	r24, r18
     a34:	91 1d       	adc	r25, r1
     a36:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <w_sorted>
     a3a:	82 0f       	add	r24, r18
     a3c:	91 1d       	adc	r25, r1
     a3e:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <b_sorted>
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	82 0f       	add	r24, r18
     a48:	91 1d       	adc	r25, r1
				if (queue_head != NULL)
     a4a:	34 dd       	rcall	.-1432   	; 0x4b4 <LCDWriteInt>
     a4c:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <queue_head>
     a50:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <queue_head+0x1>
				{
					LCDWriteIntXY(5, 0, queue_head->piece_code, 1);
     a54:	89 2b       	or	r24, r25
     a56:	c9 f0       	breq	.+50     	; 0xa8a <main+0x1c2>
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	85 e0       	ldi	r24, 0x05	; 5
     a5c:	8a dd       	rcall	.-1260   	; 0x572 <LCDGotoXY>
     a5e:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <queue_head>
     a62:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <queue_head+0x1>
     a66:	80 81       	ld	r24, Z
     a68:	61 e0       	ldi	r22, 0x01	; 1
					LCDWriteIntXY(5, 1, queue_tail->piece_code, 1);
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	22 dd       	rcall	.-1468   	; 0x4b4 <LCDWriteInt>
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	85 e0       	ldi	r24, 0x05	; 5
     a74:	7e dd       	rcall	.-1284   	; 0x572 <LCDGotoXY>
     a76:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <__data_end>
     a7a:	f0 91 25 03 	lds	r31, 0x0325	; 0x800325 <__data_end+0x1>
     a7e:	80 81       	ld	r24, Z
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	16 dd       	rcall	.-1492   	; 0x4b4 <LCDWriteInt>
				}
				else 
				{
					LCDWriteStringXY(5, 0, "N");
     a88:	0c c0       	rjmp	.+24     	; 0xaa2 <main+0x1da>
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	85 e0       	ldi	r24, 0x05	; 5
     a8e:	71 dd       	rcall	.-1310   	; 0x572 <LCDGotoXY>
     a90:	8b ea       	ldi	r24, 0xAB	; 171
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	02 dd       	rcall	.-1532   	; 0x49a <LCDWriteString>
					LCDWriteStringXY(5, 1, "N");
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	85 e0       	ldi	r24, 0x05	; 5
     a9a:	6b dd       	rcall	.-1322   	; 0x572 <LCDGotoXY>
     a9c:	8b ea       	ldi	r24, 0xAB	; 171
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	fc dc       	rcall	.-1544   	; 0x49a <LCDWriteString>
     aa2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <was_paused>
				}
				was_paused = 0;
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	85 b9       	out	0x05, r24	; 5
				BELT_MOVE();
     aaa:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <PINA_input>
			}	

			// - SORT PART AT FRONT (EX active LOW)
			if (!(PINA_input & (1 << 1))) // if EX active
     aae:	81 fd       	sbrc	r24, 1
     ab0:	18 c0       	rjmp	.+48     	; 0xae2 <main+0x21a>
     ab2:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <queue_head>
			{
				if (queue_head != NULL && queue_head->piece_code != current_bucket)
     ab6:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <queue_head+0x1>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	09 f4       	brne	.+2      	; 0xac0 <main+0x1f8>
     abe:	86 c0       	rjmp	.+268    	; 0xbcc <main+0x304>
     ac0:	90 81       	ld	r25, Z
     ac2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <current_bucket>
     ac6:	98 17       	cp	r25, r24
     ac8:	09 f4       	brne	.+2      	; 0xacc <main+0x204>
     aca:	80 c0       	rjmp	.+256    	; 0xbcc <main+0x304>
     acc:	8f e0       	ldi	r24, 0x0F	; 15
     ace:	85 b9       	out	0x05, r24	; 5
				{
					BELT_STOP();
     ad0:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <queue_head>
					//mTimer(10);
					stepper_move(queue_head->piece_code);
     ad4:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <queue_head+0x1>
     ad8:	80 81       	ld	r24, Z
     ada:	9a dd       	rcall	.-1228   	; 0x610 <stepper_move>
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	85 b9       	out	0x05, r24	; 5
     ae0:	75 c0       	rjmp	.+234    	; 0xbcc <main+0x304>
					BELT_MOVE();
     ae2:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <previous_PINA_input>
     ae6:	81 fd       	sbrc	r24, 1
				}
			}
			else if (!(previous_PINA_input & (1 << 1)) && queue_head != NULL) // if EX inactive but was active last time
     ae8:	71 c0       	rjmp	.+226    	; 0xbcc <main+0x304>
     aea:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <queue_head>
     aee:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <queue_head+0x1>
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	09 f4       	brne	.+2      	; 0xaf8 <main+0x230>
     af6:	6a c0       	rjmp	.+212    	; 0xbcc <main+0x304>
     af8:	fc 01       	movw	r30, r24
     afa:	20 81       	ld	r18, Z
     afc:	21 30       	cpi	r18, 0x01	; 1
			{
				// front of queue has been sorted
					 if (queue_head->piece_code == 1) a_sorted++;
     afe:	31 f4       	brne	.+12     	; 0xb0c <main+0x244>
     b00:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <a_sorted>
     b04:	2f 5f       	subi	r18, 0xFF	; 255
     b06:	20 93 2e 03 	sts	0x032E, r18	; 0x80032e <a_sorted>
     b0a:	17 c0       	rjmp	.+46     	; 0xb3a <main+0x272>
     b0c:	22 30       	cpi	r18, 0x02	; 2
     b0e:	31 f4       	brne	.+12     	; 0xb1c <main+0x254>
				else if (queue_head->piece_code == 2) s_sorted++;
     b10:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <s_sorted>
     b14:	2f 5f       	subi	r18, 0xFF	; 255
     b16:	20 93 2d 03 	sts	0x032D, r18	; 0x80032d <s_sorted>
     b1a:	0f c0       	rjmp	.+30     	; 0xb3a <main+0x272>
     b1c:	23 30       	cpi	r18, 0x03	; 3
				else if (queue_head->piece_code == 3) w_sorted++;
     b1e:	31 f4       	brne	.+12     	; 0xb2c <main+0x264>
     b20:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <w_sorted>
     b24:	2f 5f       	subi	r18, 0xFF	; 255
     b26:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <w_sorted>
				else if (queue_head->piece_code == 4) b_sorted++;
     b2a:	07 c0       	rjmp	.+14     	; 0xb3a <main+0x272>
     b2c:	24 30       	cpi	r18, 0x04	; 4
     b2e:	29 f4       	brne	.+10     	; 0xb3a <main+0x272>
     b30:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <b_sorted>
				
				// remove piece from queue
				link *temp_link = queue_head;
				queue_head = queue_head->next;
     b34:	2f 5f       	subi	r18, 0xFF	; 255
     b36:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <b_sorted>
     b3a:	fc 01       	movw	r30, r24
     b3c:	21 81       	ldd	r18, Z+1	; 0x01
				free(temp_link);
     b3e:	32 81       	ldd	r19, Z+2	; 0x02
				
				if (queue_head != NULL)
     b40:	30 93 27 03 	sts	0x0327, r19	; 0x800327 <queue_head+0x1>
     b44:	20 93 26 03 	sts	0x0326, r18	; 0x800326 <queue_head>
     b48:	66 d5       	rcall	.+2764   	; 0x1616 <free>
				{
					LCDWriteIntXY(5, 1, queue_head->piece_code, 1);
     b4a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <queue_head>
     b4e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <queue_head+0x1>
     b52:	89 2b       	or	r24, r25
     b54:	a1 f0       	breq	.+40     	; 0xb7e <main+0x2b6>
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	85 e0       	ldi	r24, 0x05	; 5
     b5a:	0b dd       	rcall	.-1514   	; 0x572 <LCDGotoXY>
     b5c:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <queue_head>
     b60:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <queue_head+0x1>
					LCDWriteIntXY(15, 0, sizeofqueue(), 1);
     b64:	80 81       	ld	r24, Z
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a3 dc       	rcall	.-1722   	; 0x4b4 <LCDWriteInt>
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	8f e0       	ldi	r24, 0x0F	; 15
     b72:	ff dc       	rcall	.-1538   	; 0x572 <LCDGotoXY>
     b74:	9b de       	rcall	.-714    	; 0x8ac <sizeofqueue>
     b76:	61 e0       	ldi	r22, 0x01	; 1
				}
				else
				{
					queue_tail = NULL;
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	9c dc       	rcall	.-1736   	; 0x4b4 <LCDWriteInt>
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <main+0x2da>
     b7e:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <__data_end+0x1>
					LCDWriteStringXY(5, 1, "N");
     b82:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <__data_end>
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	85 e0       	ldi	r24, 0x05	; 5
     b8a:	f3 dc       	rcall	.-1562   	; 0x572 <LCDGotoXY>
     b8c:	8b ea       	ldi	r24, 0xAB	; 171
     b8e:	92 e0       	ldi	r25, 0x02	; 2
					LCDWriteIntXY(15, 0, 0, 1);
     b90:	84 dc       	rcall	.-1784   	; 0x49a <LCDWriteString>
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	8f e0       	ldi	r24, 0x0F	; 15
     b96:	ed dc       	rcall	.-1574   	; 0x572 <LCDGotoXY>
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	89 dc       	rcall	.-1774   	; 0x4b4 <LCDWriteInt>
     ba2:	61 e0       	ldi	r22, 0x01	; 1
				}
				
				LCDWriteIntXY(14, 1, TOTAL_SORTED, 2);
     ba4:	8e e0       	ldi	r24, 0x0E	; 14
     ba6:	e5 dc       	rcall	.-1590   	; 0x572 <LCDGotoXY>
     ba8:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <a_sorted>
     bac:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <s_sorted>
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	82 0f       	add	r24, r18
     bb4:	91 1d       	adc	r25, r1
     bb6:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <w_sorted>
     bba:	82 0f       	add	r24, r18
     bbc:	91 1d       	adc	r25, r1
     bbe:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <b_sorted>
     bc2:	62 e0       	ldi	r22, 0x02	; 2
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	82 0f       	add	r24, r18
     bc8:	91 1d       	adc	r25, r1
     bca:	74 dc       	rcall	.-1816   	; 0x4b4 <LCDWriteInt>
     bcc:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <PINA_input>
     bd0:	80 fd       	sbrc	r24, 0
			}

			// - classify a part if nothing in front of prox sensor (but there was last time)
			if (!(PINA_input & (1 << 0)) && (previous_PINA_input & (1 << 0)))
     bd2:	8f c0       	rjmp	.+286    	; 0xcf2 <main+0x42a>
     bd4:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <previous_PINA_input>
     bd8:	80 ff       	sbrs	r24, 0
     bda:	8b c0       	rjmp	.+278    	; 0xcf2 <main+0x42a>
     bdc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <current_part_max_reflection>
			{
				if (current_part_max_reflection < ALUMINUM_STEEL_MIDPOINT)
     be0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <current_part_max_reflection+0x1>
     be4:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <ALUMINUM_STEEL_MIDPOINT>
     be8:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <ALUMINUM_STEEL_MIDPOINT+0x1>
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
					most_recent_part = 1; // aluminum
     bf0:	20 f4       	brcc	.+8      	; 0xbfa <main+0x332>
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <most_recent_part>
				else if (current_part_max_reflection < STEEL_WHITE_MIDPOINT)
     bf8:	39 c0       	rjmp	.+114    	; 0xc6c <main+0x3a4>
     bfa:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <STEEL_WHITE_MIDPOINT>
     bfe:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <STEEL_WHITE_MIDPOINT+0x1>
					most_recent_part = 2; // steel
     c02:	82 17       	cp	r24, r18
     c04:	93 07       	cpc	r25, r19
				else if (current_part_max_reflection < WHITE_BLACK_MIDPOINT)
     c06:	20 f4       	brcc	.+8      	; 0xc10 <main+0x348>
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <most_recent_part>
     c0e:	2e c0       	rjmp	.+92     	; 0xc6c <main+0x3a4>
     c10:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <WHITE_BLACK_MIDPOINT>
					most_recent_part = 3; // white
     c14:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <WHITE_BLACK_MIDPOINT+0x1>
				else if (current_part_max_reflection < 1025)
     c18:	82 17       	cp	r24, r18
     c1a:	93 07       	cpc	r25, r19
					most_recent_part = 4; // black
     c1c:	20 f4       	brcc	.+8      	; 0xc26 <main+0x35e>
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <most_recent_part>
				else
				{
					DISABLE_MOTORS();
     c24:	23 c0       	rjmp	.+70     	; 0xc6c <main+0x3a4>
     c26:	81 30       	cpi	r24, 0x01	; 1
					LCDWriteStringXY(0, 0, "CLASSIFIER ERROR");
     c28:	94 40       	sbci	r25, 0x04	; 4
     c2a:	20 f4       	brcc	.+8      	; 0xc34 <main+0x36c>
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <most_recent_part>
     c32:	1c c0       	rjmp	.+56     	; 0xc6c <main+0x3a4>
					LCDWriteStringXY(0, 1, "final ADC =     ");
     c34:	8c e0       	ldi	r24, 0x0C	; 12
     c36:	85 b9       	out	0x05, r24	; 5
     c38:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
					LCDWriteIntXY(11, 1, current_part_max_reflection, 4);
     c40:	98 dc       	rcall	.-1744   	; 0x572 <LCDGotoXY>
     c42:	8d ea       	ldi	r24, 0xAD	; 173
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	29 dc       	rcall	.-1966   	; 0x49a <LCDWriteString>
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	92 dc       	rcall	.-1756   	; 0x572 <LCDGotoXY>
     c4e:	8e eb       	ldi	r24, 0xBE	; 190
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	23 dc       	rcall	.-1978   	; 0x49a <LCDWriteString>
					flashPortL(0);
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	8b e0       	ldi	r24, 0x0B	; 11
     c58:	8c dc       	rcall	.-1768   	; 0x572 <LCDGotoXY>
				}

				if (!add_to_queue(most_recent_part))
     c5a:	64 e0       	ldi	r22, 0x04	; 4
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <current_part_max_reflection>
     c62:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <current_part_max_reflection+0x1>
				{
					DISABLE_MOTORS();
     c66:	26 dc       	rcall	.-1972   	; 0x4b4 <LCDWriteInt>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	bc da       	rcall	.-2696   	; 0x1e4 <flashPortL>
					LCDWriteStringXY(0, 0, "QUEUE ADD ERROR ");
     c6c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <most_recent_part>
     c70:	ef dd       	rcall	.-1058   	; 0x850 <add_to_queue>
     c72:	81 11       	cpse	r24, r1
     c74:	12 c0       	rjmp	.+36     	; 0xc9a <main+0x3d2>
     c76:	8c e0       	ldi	r24, 0x0C	; 12
     c78:	85 b9       	out	0x05, r24	; 5
     c7a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
					LCDWriteStringXY(0, 1, "NO FURTHER INFO ");
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	77 dc       	rcall	.-1810   	; 0x572 <LCDGotoXY>
     c84:	8f ec       	ldi	r24, 0xCF	; 207
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	08 dc       	rcall	.-2032   	; 0x49a <LCDWriteString>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
					flashPortL(0);
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	71 dc       	rcall	.-1822   	; 0x572 <LCDGotoXY>
     c90:	80 ee       	ldi	r24, 0xE0	; 224
				}

				LCDWriteIntXY(15, 0, sizeofqueue(), 1);
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	02 dc       	rcall	.-2044   	; 0x49a <LCDWriteString>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	a5 da       	rcall	.-2742   	; 0x1e4 <flashPortL>
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	8f e0       	ldi	r24, 0x0F	; 15
     c9e:	69 dc       	rcall	.-1838   	; 0x572 <LCDGotoXY>
     ca0:	05 de       	rcall	.-1014   	; 0x8ac <sizeofqueue>
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	70 e0       	ldi	r23, 0x00	; 0
				LCDWriteIntXY(5, 0, most_recent_part, 1);
     ca6:	06 dc       	rcall	.-2036   	; 0x4b4 <LCDWriteInt>
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	85 e0       	ldi	r24, 0x05	; 5
     cac:	62 dc       	rcall	.-1852   	; 0x572 <LCDGotoXY>
     cae:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <most_recent_part>
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	fd db       	rcall	.-2054   	; 0x4b4 <LCDWriteInt>
     cba:	60 e0       	ldi	r22, 0x00	; 0
				LCDWriteIntXY(7, 0, current_part_max_reflection, 4);
     cbc:	87 e0       	ldi	r24, 0x07	; 7
     cbe:	59 dc       	rcall	.-1870   	; 0x572 <LCDGotoXY>
     cc0:	64 e0       	ldi	r22, 0x04	; 4
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <current_part_max_reflection>
     cc8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <current_part_max_reflection+0x1>
     ccc:	f3 db       	rcall	.-2074   	; 0x4b4 <LCDWriteInt>
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	4f dc       	rcall	.-1890   	; 0x572 <LCDGotoXY>
				LCDWriteIntXY(5, 1, queue_head->piece_code, 1);
     cd4:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <queue_head>
     cd8:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <queue_head+0x1>
     cdc:	80 81       	ld	r24, Z
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	e7 db       	rcall	.-2098   	; 0x4b4 <LCDWriteInt>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <current_part_max_reflection+0x1>
     cee:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <current_part_max_reflection>
				current_part_max_reflection = 1025;	// reset ADC output for part
     cf2:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <new_ADC_output_available>
     cf6:	88 23       	and	r24, r24
     cf8:	b1 f1       	breq	.+108    	; 0xd66 <main+0x49e>
     cfa:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <PINA_input>
			}

			// - deal with an ADC output only if OR sees something, except first read of a part
			if (new_ADC_output_available && (PINA_input & (1 << 0)) )
     cfe:	80 ff       	sbrs	r24, 0
     d00:	32 c0       	rjmp	.+100    	; 0xd66 <main+0x49e>
     d02:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <ADCH_output>
     d06:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <ADCH_output+0x1>
     d0a:	9c 01       	movw	r18, r24
			{
				ADC_output = (ADCH_output << 2) | (ADCL_output >> 6);
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	22 0f       	add	r18, r18
     d12:	33 1f       	adc	r19, r19
     d14:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ADCL_output>
     d18:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <ADCL_output+0x1>
     d1c:	00 24       	eor	r0, r0
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	00 1c       	adc	r0, r0
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	00 1c       	adc	r0, r0
     d2a:	89 2f       	mov	r24, r25
     d2c:	90 2d       	mov	r25, r0
     d2e:	82 2b       	or	r24, r18
     d30:	93 2b       	or	r25, r19
     d32:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <ADC_output+0x1>
     d36:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <ADC_output>
				if (ADC_output < current_part_max_reflection && (previous_PINA_input & (1 << 0))) 
     d3a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <current_part_max_reflection>
     d3e:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <current_part_max_reflection+0x1>
     d42:	82 17       	cp	r24, r18
     d44:	93 07       	cpc	r25, r19
     d46:	40 f4       	brcc	.+16     	; 0xd58 <main+0x490>
     d48:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <previous_PINA_input>
					current_part_max_reflection = ADC_output;
     d4c:	20 ff       	sbrs	r18, 0
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <main+0x490>
     d50:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <current_part_max_reflection+0x1>
				new_ADC_output_available = 0;
				ADCSRA |= _BV(ADSC); // start the next conversion
     d54:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <current_part_max_reflection>
     d58:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <new_ADC_output_available>
     d5c:	ea e7       	ldi	r30, 0x7A	; 122
			}

			previous_PINA_input = PINA_input;
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
		}
	
		if (rampdown && queue_head == NULL)
     d62:	80 64       	ori	r24, 0x40	; 64
     d64:	80 83       	st	Z, r24
     d66:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <PINA_input>
     d6a:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <previous_PINA_input>
     d6e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rampdown>
     d72:	88 23       	and	r24, r24
     d74:	09 f4       	brne	.+2      	; 0xd78 <main+0x4b0>
     d76:	43 c0       	rjmp	.+134    	; 0xdfe <main+0x536>
     d78:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <queue_head>
		{
			EIMSK &= ~_BV(INT3); // enable INT3 to disable pause
     d7c:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <queue_head+0x1>
			EIMSK &= ~_BV(INT2); // enable INT2 to disable rampdown re-trigger
     d80:	23 2b       	or	r18, r19
     d82:	09 f0       	breq	.+2      	; 0xd86 <main+0x4be>
     d84:	3c c0       	rjmp	.+120    	; 0xdfe <main+0x536>
			DISABLE_MOTORS();
     d86:	8d b3       	in	r24, 0x1d	; 29
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	8d bb       	out	0x1d, r24	; 29
     d8c:	8d b3       	in	r24, 0x1d	; 29
			LCDWriteStringXY(0, 0, "rampdown.       ");
     d8e:	8b 7f       	andi	r24, 0xFB	; 251
     d90:	8d bb       	out	0x1d, r24	; 29
     d92:	8c e0       	ldi	r24, 0x0C	; 12
     d94:	85 b9       	out	0x05, r24	; 5
     d96:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	80 e0       	ldi	r24, 0x00	; 0
			LCDWriteStringXY(0, 1, "a   s   w   b   ");
     d9e:	e9 db       	rcall	.-2094   	; 0x572 <LCDGotoXY>
     da0:	81 ef       	ldi	r24, 0xF1	; 241
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	7a db       	rcall	.-2316   	; 0x49a <LCDWriteString>
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	e3 db       	rcall	.-2106   	; 0x572 <LCDGotoXY>
     dac:	82 e0       	ldi	r24, 0x02	; 2
			LCDWriteIntXY( 1, 1, a_sorted, 2);
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	74 db       	rcall	.-2328   	; 0x49a <LCDWriteString>
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	dd db       	rcall	.-2118   	; 0x572 <LCDGotoXY>
     db8:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <a_sorted>
     dbc:	62 e0       	ldi	r22, 0x02	; 2
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	78 db       	rcall	.-2320   	; 0x4b4 <LCDWriteInt>
			LCDWriteIntXY( 5, 1, s_sorted, 2);
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	85 e0       	ldi	r24, 0x05	; 5
     dc8:	d4 db       	rcall	.-2136   	; 0x572 <LCDGotoXY>
     dca:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <s_sorted>
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	6f db       	rcall	.-2338   	; 0x4b4 <LCDWriteInt>
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	89 e0       	ldi	r24, 0x09	; 9
			LCDWriteIntXY( 9, 1, w_sorted, 2);
     dda:	cb db       	rcall	.-2154   	; 0x572 <LCDGotoXY>
     ddc:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <w_sorted>
     de0:	62 e0       	ldi	r22, 0x02	; 2
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	66 db       	rcall	.-2356   	; 0x4b4 <LCDWriteInt>
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	8d e0       	ldi	r24, 0x0D	; 13
     dec:	c2 db       	rcall	.-2172   	; 0x572 <LCDGotoXY>
     dee:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <b_sorted>
			LCDWriteIntXY(13, 1, b_sorted, 2);
     df2:	62 e0       	ldi	r22, 0x02	; 2
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	5d db       	rcall	.-2374   	; 0x4b4 <LCDWriteInt>
     dfa:	6d da       	rcall	.-2854   	; 0x2d6 <nightriderPortL>
     dfc:	ea cd       	rjmp	.-1068   	; 0x9d2 <main+0x10a>
     dfe:	88 23       	and	r24, r24
     e00:	09 f4       	brne	.+2      	; 0xe04 <main+0x53c>
     e02:	e7 cd       	rjmp	.-1074   	; 0x9d2 <main+0x10a>
     e04:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <rampdown_indicated>
			nightriderPortL();
     e08:	81 11       	cpse	r24, r1
     e0a:	e3 cd       	rjmp	.-1082   	; 0x9d2 <main+0x10a>
		}
		else if (rampdown && !rampdown_indicated)
     e0c:	80 ef       	ldi	r24, 0xF0	; 240
     e0e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <rampdown_indicated>
     e18:	dc cd       	rjmp	.-1096   	; 0x9d2 <main+0x10a>

00000e1a <__vector_3>:
		{
			PORTL = 0b11110000;
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
			rampdown_indicated = 1;
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	8f 93       	push	r24
     e26:	81 e0       	ldi	r24, 0x01	; 1
//*################################### INTERRUPT DEFINITIONS #####################################*//

// - interrupt for kill switch
ISR(INT2_vect)
{
	rampdown = 1;
     e28:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <rampdown>
}
     e2c:	8f 91       	pop	r24
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__vector_4>:

// - interrupt for pause button
ISR(INT3_vect)
{
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	0b b6       	in	r0, 0x3b	; 59
     e44:	0f 92       	push	r0
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
	if (!(PIND & 1<<3))
     e5e:	4b 99       	sbic	0x09, 3	; 9
     e60:	4b c0       	rjmp	.+150    	; 0xef8 <__vector_4+0xc0>
	{
		BELT_STOP();
     e62:	8f e0       	ldi	r24, 0x0F	; 15
     e64:	85 b9       	out	0x05, r24	; 5
		mTimer(20);
     e66:	84 e1       	ldi	r24, 0x14	; 20
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	6c d9       	rcall	.-3368   	; 0x144 <mTimer>
		pause = !pause;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <pause>
     e72:	91 11       	cpse	r25, r1
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <pause>
		while(!(PIND & 1<<3));
     e7a:	4b 9b       	sbis	0x09, 3	; 9
     e7c:	fe cf       	rjmp	.-4      	; 0xe7a <__vector_4+0x42>
		mTimer(20);
     e7e:	84 e1       	ldi	r24, 0x14	; 20
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	60 d9       	rcall	.-3392   	; 0x144 <mTimer>
		LCDWriteStringXY(0, 0, "PAUSED  queue=  ");
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	74 db       	rcall	.-2328   	; 0x572 <LCDGotoXY>
     e8a:	83 e1       	ldi	r24, 0x13	; 19
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	05 db       	rcall	.-2550   	; 0x49a <LCDWriteString>
		LCDWriteStringXY(0, 1, "a   s   w   b   ");
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	6e db       	rcall	.-2340   	; 0x572 <LCDGotoXY>
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	93 e0       	ldi	r25, 0x03	; 3
		LCDWriteIntXY(14, 0, sizeofqueue(), 2);
     e9a:	ff da       	rcall	.-2562   	; 0x49a <LCDWriteString>
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	8e e0       	ldi	r24, 0x0E	; 14
     ea0:	68 db       	rcall	.-2352   	; 0x572 <LCDGotoXY>
     ea2:	04 dd       	rcall	.-1528   	; 0x8ac <sizeofqueue>
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	05 db       	rcall	.-2550   	; 0x4b4 <LCDWriteInt>
		LCDWriteIntXY( 1, 1, a_sorted, 2);
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	61 db       	rcall	.-2366   	; 0x572 <LCDGotoXY>
     eb0:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <a_sorted>
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	fc da       	rcall	.-2568   	; 0x4b4 <LCDWriteInt>
		LCDWriteIntXY( 5, 1, s_sorted, 2);
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	58 db       	rcall	.-2384   	; 0x572 <LCDGotoXY>
     ec2:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <s_sorted>
     ec6:	62 e0       	ldi	r22, 0x02	; 2
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	f3 da       	rcall	.-2586   	; 0x4b4 <LCDWriteInt>
		LCDWriteIntXY( 9, 1, w_sorted, 2);
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	89 e0       	ldi	r24, 0x09	; 9
     ed2:	4f db       	rcall	.-2402   	; 0x572 <LCDGotoXY>
     ed4:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <w_sorted>
     ed8:	62 e0       	ldi	r22, 0x02	; 2
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	ea da       	rcall	.-2604   	; 0x4b4 <LCDWriteInt>
     ee0:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteIntXY(13, 1, b_sorted, 2);
     ee2:	8d e0       	ldi	r24, 0x0D	; 13
     ee4:	46 db       	rcall	.-2420   	; 0x572 <LCDGotoXY>
     ee6:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <b_sorted>
     eea:	62 e0       	ldi	r22, 0x02	; 2
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	e1 da       	rcall	.-2622   	; 0x4b4 <LCDWriteInt>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <was_paused>
		was_paused = 1;
     ef8:	ff 91       	pop	r31
     efa:	ef 91       	pop	r30
     efc:	bf 91       	pop	r27
	}
}
     efe:	af 91       	pop	r26
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	7f 91       	pop	r23
     f06:	6f 91       	pop	r22
     f08:	5f 91       	pop	r21
     f0a:	4f 91       	pop	r20
     f0c:	3f 91       	pop	r19
     f0e:	2f 91       	pop	r18
     f10:	0f 90       	pop	r0
     f12:	0b be       	out	0x3b, r0	; 59
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_29>:
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63

// - interrupt for ADC complete
ISR(ADC_vect)
{
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
	ADCL_output = ADCL;	// read ADCL, locking ADC data registers
     f2c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <ADCL_output+0x1>
     f36:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <ADCL_output>
	ADCH_output = ADCH; // read ADCH, unlocking ADC data registers
     f3a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <ADCH_output+0x1>
     f44:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <ADCH_output>
	new_ADC_output_available = 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <new_ADC_output_available>
}
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__subsf3>:
     f5c:	50 58       	subi	r21, 0x80	; 128

00000f5e <__addsf3>:
     f5e:	bb 27       	eor	r27, r27
     f60:	aa 27       	eor	r26, r26
     f62:	0e d0       	rcall	.+28     	; 0xf80 <__addsf3x>
     f64:	75 c1       	rjmp	.+746    	; 0x1250 <__fp_round>
     f66:	66 d1       	rcall	.+716    	; 0x1234 <__fp_pscA>
     f68:	30 f0       	brcs	.+12     	; 0xf76 <__addsf3+0x18>
     f6a:	6b d1       	rcall	.+726    	; 0x1242 <__fp_pscB>
     f6c:	20 f0       	brcs	.+8      	; 0xf76 <__addsf3+0x18>
     f6e:	31 f4       	brne	.+12     	; 0xf7c <__addsf3+0x1e>
     f70:	9f 3f       	cpi	r25, 0xFF	; 255
     f72:	11 f4       	brne	.+4      	; 0xf78 <__addsf3+0x1a>
     f74:	1e f4       	brtc	.+6      	; 0xf7c <__addsf3+0x1e>
     f76:	5b c1       	rjmp	.+694    	; 0x122e <__fp_nan>
     f78:	0e f4       	brtc	.+2      	; 0xf7c <__addsf3+0x1e>
     f7a:	e0 95       	com	r30
     f7c:	e7 fb       	bst	r30, 7
     f7e:	51 c1       	rjmp	.+674    	; 0x1222 <__fp_inf>

00000f80 <__addsf3x>:
     f80:	e9 2f       	mov	r30, r25
     f82:	77 d1       	rcall	.+750    	; 0x1272 <__fp_split3>
     f84:	80 f3       	brcs	.-32     	; 0xf66 <__addsf3+0x8>
     f86:	ba 17       	cp	r27, r26
     f88:	62 07       	cpc	r22, r18
     f8a:	73 07       	cpc	r23, r19
     f8c:	84 07       	cpc	r24, r20
     f8e:	95 07       	cpc	r25, r21
     f90:	18 f0       	brcs	.+6      	; 0xf98 <__addsf3x+0x18>
     f92:	71 f4       	brne	.+28     	; 0xfb0 <__addsf3x+0x30>
     f94:	9e f5       	brtc	.+102    	; 0xffc <__addsf3x+0x7c>
     f96:	8f c1       	rjmp	.+798    	; 0x12b6 <__fp_zero>
     f98:	0e f4       	brtc	.+2      	; 0xf9c <__addsf3x+0x1c>
     f9a:	e0 95       	com	r30
     f9c:	0b 2e       	mov	r0, r27
     f9e:	ba 2f       	mov	r27, r26
     fa0:	a0 2d       	mov	r26, r0
     fa2:	0b 01       	movw	r0, r22
     fa4:	b9 01       	movw	r22, r18
     fa6:	90 01       	movw	r18, r0
     fa8:	0c 01       	movw	r0, r24
     faa:	ca 01       	movw	r24, r20
     fac:	a0 01       	movw	r20, r0
     fae:	11 24       	eor	r1, r1
     fb0:	ff 27       	eor	r31, r31
     fb2:	59 1b       	sub	r21, r25
     fb4:	99 f0       	breq	.+38     	; 0xfdc <__addsf3x+0x5c>
     fb6:	59 3f       	cpi	r21, 0xF9	; 249
     fb8:	50 f4       	brcc	.+20     	; 0xfce <__addsf3x+0x4e>
     fba:	50 3e       	cpi	r21, 0xE0	; 224
     fbc:	68 f1       	brcs	.+90     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     fbe:	1a 16       	cp	r1, r26
     fc0:	f0 40       	sbci	r31, 0x00	; 0
     fc2:	a2 2f       	mov	r26, r18
     fc4:	23 2f       	mov	r18, r19
     fc6:	34 2f       	mov	r19, r20
     fc8:	44 27       	eor	r20, r20
     fca:	58 5f       	subi	r21, 0xF8	; 248
     fcc:	f3 cf       	rjmp	.-26     	; 0xfb4 <__addsf3x+0x34>
     fce:	46 95       	lsr	r20
     fd0:	37 95       	ror	r19
     fd2:	27 95       	ror	r18
     fd4:	a7 95       	ror	r26
     fd6:	f0 40       	sbci	r31, 0x00	; 0
     fd8:	53 95       	inc	r21
     fda:	c9 f7       	brne	.-14     	; 0xfce <__addsf3x+0x4e>
     fdc:	7e f4       	brtc	.+30     	; 0xffc <__addsf3x+0x7c>
     fde:	1f 16       	cp	r1, r31
     fe0:	ba 0b       	sbc	r27, r26
     fe2:	62 0b       	sbc	r22, r18
     fe4:	73 0b       	sbc	r23, r19
     fe6:	84 0b       	sbc	r24, r20
     fe8:	ba f0       	brmi	.+46     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     fea:	91 50       	subi	r25, 0x01	; 1
     fec:	a1 f0       	breq	.+40     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     fee:	ff 0f       	add	r31, r31
     ff0:	bb 1f       	adc	r27, r27
     ff2:	66 1f       	adc	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	c2 f7       	brpl	.-16     	; 0xfea <__addsf3x+0x6a>
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     ffc:	ba 0f       	add	r27, r26
     ffe:	62 1f       	adc	r22, r18
    1000:	73 1f       	adc	r23, r19
    1002:	84 1f       	adc	r24, r20
    1004:	48 f4       	brcc	.+18     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1006:	87 95       	ror	r24
    1008:	77 95       	ror	r23
    100a:	67 95       	ror	r22
    100c:	b7 95       	ror	r27
    100e:	f7 95       	ror	r31
    1010:	9e 3f       	cpi	r25, 0xFE	; 254
    1012:	08 f0       	brcs	.+2      	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1014:	b3 cf       	rjmp	.-154    	; 0xf7c <__addsf3+0x1e>
    1016:	93 95       	inc	r25
    1018:	88 0f       	add	r24, r24
    101a:	08 f0       	brcs	.+2      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    101c:	99 27       	eor	r25, r25
    101e:	ee 0f       	add	r30, r30
    1020:	97 95       	ror	r25
    1022:	87 95       	ror	r24
    1024:	08 95       	ret

00001026 <__cmpsf2>:
    1026:	d9 d0       	rcall	.+434    	; 0x11da <__fp_cmp>
    1028:	08 f4       	brcc	.+2      	; 0x102c <__cmpsf2+0x6>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	08 95       	ret

0000102e <__divsf3>:
    102e:	0c d0       	rcall	.+24     	; 0x1048 <__divsf3x>
    1030:	0f c1       	rjmp	.+542    	; 0x1250 <__fp_round>
    1032:	07 d1       	rcall	.+526    	; 0x1242 <__fp_pscB>
    1034:	40 f0       	brcs	.+16     	; 0x1046 <__divsf3+0x18>
    1036:	fe d0       	rcall	.+508    	; 0x1234 <__fp_pscA>
    1038:	30 f0       	brcs	.+12     	; 0x1046 <__divsf3+0x18>
    103a:	21 f4       	brne	.+8      	; 0x1044 <__divsf3+0x16>
    103c:	5f 3f       	cpi	r21, 0xFF	; 255
    103e:	19 f0       	breq	.+6      	; 0x1046 <__divsf3+0x18>
    1040:	f0 c0       	rjmp	.+480    	; 0x1222 <__fp_inf>
    1042:	51 11       	cpse	r21, r1
    1044:	39 c1       	rjmp	.+626    	; 0x12b8 <__fp_szero>
    1046:	f3 c0       	rjmp	.+486    	; 0x122e <__fp_nan>

00001048 <__divsf3x>:
    1048:	14 d1       	rcall	.+552    	; 0x1272 <__fp_split3>
    104a:	98 f3       	brcs	.-26     	; 0x1032 <__divsf3+0x4>

0000104c <__divsf3_pse>:
    104c:	99 23       	and	r25, r25
    104e:	c9 f3       	breq	.-14     	; 0x1042 <__divsf3+0x14>
    1050:	55 23       	and	r21, r21
    1052:	b1 f3       	breq	.-20     	; 0x1040 <__divsf3+0x12>
    1054:	95 1b       	sub	r25, r21
    1056:	55 0b       	sbc	r21, r21
    1058:	bb 27       	eor	r27, r27
    105a:	aa 27       	eor	r26, r26
    105c:	62 17       	cp	r22, r18
    105e:	73 07       	cpc	r23, r19
    1060:	84 07       	cpc	r24, r20
    1062:	38 f0       	brcs	.+14     	; 0x1072 <__divsf3_pse+0x26>
    1064:	9f 5f       	subi	r25, 0xFF	; 255
    1066:	5f 4f       	sbci	r21, 0xFF	; 255
    1068:	22 0f       	add	r18, r18
    106a:	33 1f       	adc	r19, r19
    106c:	44 1f       	adc	r20, r20
    106e:	aa 1f       	adc	r26, r26
    1070:	a9 f3       	breq	.-22     	; 0x105c <__divsf3_pse+0x10>
    1072:	33 d0       	rcall	.+102    	; 0x10da <__divsf3_pse+0x8e>
    1074:	0e 2e       	mov	r0, r30
    1076:	3a f0       	brmi	.+14     	; 0x1086 <__divsf3_pse+0x3a>
    1078:	e0 e8       	ldi	r30, 0x80	; 128
    107a:	30 d0       	rcall	.+96     	; 0x10dc <__divsf3_pse+0x90>
    107c:	91 50       	subi	r25, 0x01	; 1
    107e:	50 40       	sbci	r21, 0x00	; 0
    1080:	e6 95       	lsr	r30
    1082:	00 1c       	adc	r0, r0
    1084:	ca f7       	brpl	.-14     	; 0x1078 <__divsf3_pse+0x2c>
    1086:	29 d0       	rcall	.+82     	; 0x10da <__divsf3_pse+0x8e>
    1088:	fe 2f       	mov	r31, r30
    108a:	27 d0       	rcall	.+78     	; 0x10da <__divsf3_pse+0x8e>
    108c:	66 0f       	add	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	88 1f       	adc	r24, r24
    1092:	bb 1f       	adc	r27, r27
    1094:	26 17       	cp	r18, r22
    1096:	37 07       	cpc	r19, r23
    1098:	48 07       	cpc	r20, r24
    109a:	ab 07       	cpc	r26, r27
    109c:	b0 e8       	ldi	r27, 0x80	; 128
    109e:	09 f0       	breq	.+2      	; 0x10a2 <__divsf3_pse+0x56>
    10a0:	bb 0b       	sbc	r27, r27
    10a2:	80 2d       	mov	r24, r0
    10a4:	bf 01       	movw	r22, r30
    10a6:	ff 27       	eor	r31, r31
    10a8:	93 58       	subi	r25, 0x83	; 131
    10aa:	5f 4f       	sbci	r21, 0xFF	; 255
    10ac:	2a f0       	brmi	.+10     	; 0x10b8 <__divsf3_pse+0x6c>
    10ae:	9e 3f       	cpi	r25, 0xFE	; 254
    10b0:	51 05       	cpc	r21, r1
    10b2:	68 f0       	brcs	.+26     	; 0x10ce <__divsf3_pse+0x82>
    10b4:	b6 c0       	rjmp	.+364    	; 0x1222 <__fp_inf>
    10b6:	00 c1       	rjmp	.+512    	; 0x12b8 <__fp_szero>
    10b8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ba:	ec f3       	brlt	.-6      	; 0x10b6 <__divsf3_pse+0x6a>
    10bc:	98 3e       	cpi	r25, 0xE8	; 232
    10be:	dc f3       	brlt	.-10     	; 0x10b6 <__divsf3_pse+0x6a>
    10c0:	86 95       	lsr	r24
    10c2:	77 95       	ror	r23
    10c4:	67 95       	ror	r22
    10c6:	b7 95       	ror	r27
    10c8:	f7 95       	ror	r31
    10ca:	9f 5f       	subi	r25, 0xFF	; 255
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <__divsf3_pse+0x74>
    10ce:	88 0f       	add	r24, r24
    10d0:	91 1d       	adc	r25, r1
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	97 f9       	bld	r25, 7
    10d8:	08 95       	ret
    10da:	e1 e0       	ldi	r30, 0x01	; 1
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	bb 1f       	adc	r27, r27
    10e4:	62 17       	cp	r22, r18
    10e6:	73 07       	cpc	r23, r19
    10e8:	84 07       	cpc	r24, r20
    10ea:	ba 07       	cpc	r27, r26
    10ec:	20 f0       	brcs	.+8      	; 0x10f6 <__divsf3_pse+0xaa>
    10ee:	62 1b       	sub	r22, r18
    10f0:	73 0b       	sbc	r23, r19
    10f2:	84 0b       	sbc	r24, r20
    10f4:	ba 0b       	sbc	r27, r26
    10f6:	ee 1f       	adc	r30, r30
    10f8:	88 f7       	brcc	.-30     	; 0x10dc <__divsf3_pse+0x90>
    10fa:	e0 95       	com	r30
    10fc:	08 95       	ret

000010fe <__fixsfsi>:
    10fe:	04 d0       	rcall	.+8      	; 0x1108 <__fixunssfsi>
    1100:	68 94       	set
    1102:	b1 11       	cpse	r27, r1
    1104:	d9 c0       	rjmp	.+434    	; 0x12b8 <__fp_szero>
    1106:	08 95       	ret

00001108 <__fixunssfsi>:
    1108:	bc d0       	rcall	.+376    	; 0x1282 <__fp_splitA>
    110a:	88 f0       	brcs	.+34     	; 0x112e <__fixunssfsi+0x26>
    110c:	9f 57       	subi	r25, 0x7F	; 127
    110e:	90 f0       	brcs	.+36     	; 0x1134 <__fixunssfsi+0x2c>
    1110:	b9 2f       	mov	r27, r25
    1112:	99 27       	eor	r25, r25
    1114:	b7 51       	subi	r27, 0x17	; 23
    1116:	a0 f0       	brcs	.+40     	; 0x1140 <__fixunssfsi+0x38>
    1118:	d1 f0       	breq	.+52     	; 0x114e <__fixunssfsi+0x46>
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	88 1f       	adc	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	1a f0       	brmi	.+6      	; 0x112a <__fixunssfsi+0x22>
    1124:	ba 95       	dec	r27
    1126:	c9 f7       	brne	.-14     	; 0x111a <__fixunssfsi+0x12>
    1128:	12 c0       	rjmp	.+36     	; 0x114e <__fixunssfsi+0x46>
    112a:	b1 30       	cpi	r27, 0x01	; 1
    112c:	81 f0       	breq	.+32     	; 0x114e <__fixunssfsi+0x46>
    112e:	c3 d0       	rcall	.+390    	; 0x12b6 <__fp_zero>
    1130:	b1 e0       	ldi	r27, 0x01	; 1
    1132:	08 95       	ret
    1134:	c0 c0       	rjmp	.+384    	; 0x12b6 <__fp_zero>
    1136:	67 2f       	mov	r22, r23
    1138:	78 2f       	mov	r23, r24
    113a:	88 27       	eor	r24, r24
    113c:	b8 5f       	subi	r27, 0xF8	; 248
    113e:	39 f0       	breq	.+14     	; 0x114e <__fixunssfsi+0x46>
    1140:	b9 3f       	cpi	r27, 0xF9	; 249
    1142:	cc f3       	brlt	.-14     	; 0x1136 <__fixunssfsi+0x2e>
    1144:	86 95       	lsr	r24
    1146:	77 95       	ror	r23
    1148:	67 95       	ror	r22
    114a:	b3 95       	inc	r27
    114c:	d9 f7       	brne	.-10     	; 0x1144 <__fixunssfsi+0x3c>
    114e:	3e f4       	brtc	.+14     	; 0x115e <__fixunssfsi+0x56>
    1150:	90 95       	com	r25
    1152:	80 95       	com	r24
    1154:	70 95       	com	r23
    1156:	61 95       	neg	r22
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__floatunsisf>:
    1160:	e8 94       	clt
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <__floatsisf+0x12>

00001164 <__floatsisf>:
    1164:	97 fb       	bst	r25, 7
    1166:	3e f4       	brtc	.+14     	; 0x1176 <__floatsisf+0x12>
    1168:	90 95       	com	r25
    116a:	80 95       	com	r24
    116c:	70 95       	com	r23
    116e:	61 95       	neg	r22
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	99 23       	and	r25, r25
    1178:	a9 f0       	breq	.+42     	; 0x11a4 <__floatsisf+0x40>
    117a:	f9 2f       	mov	r31, r25
    117c:	96 e9       	ldi	r25, 0x96	; 150
    117e:	bb 27       	eor	r27, r27
    1180:	93 95       	inc	r25
    1182:	f6 95       	lsr	r31
    1184:	87 95       	ror	r24
    1186:	77 95       	ror	r23
    1188:	67 95       	ror	r22
    118a:	b7 95       	ror	r27
    118c:	f1 11       	cpse	r31, r1
    118e:	f8 cf       	rjmp	.-16     	; 0x1180 <__floatsisf+0x1c>
    1190:	fa f4       	brpl	.+62     	; 0x11d0 <__floatsisf+0x6c>
    1192:	bb 0f       	add	r27, r27
    1194:	11 f4       	brne	.+4      	; 0x119a <__floatsisf+0x36>
    1196:	60 ff       	sbrs	r22, 0
    1198:	1b c0       	rjmp	.+54     	; 0x11d0 <__floatsisf+0x6c>
    119a:	6f 5f       	subi	r22, 0xFF	; 255
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8f 4f       	sbci	r24, 0xFF	; 255
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	16 c0       	rjmp	.+44     	; 0x11d0 <__floatsisf+0x6c>
    11a4:	88 23       	and	r24, r24
    11a6:	11 f0       	breq	.+4      	; 0x11ac <__floatsisf+0x48>
    11a8:	96 e9       	ldi	r25, 0x96	; 150
    11aa:	11 c0       	rjmp	.+34     	; 0x11ce <__floatsisf+0x6a>
    11ac:	77 23       	and	r23, r23
    11ae:	21 f0       	breq	.+8      	; 0x11b8 <__floatsisf+0x54>
    11b0:	9e e8       	ldi	r25, 0x8E	; 142
    11b2:	87 2f       	mov	r24, r23
    11b4:	76 2f       	mov	r23, r22
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <__floatsisf+0x5e>
    11b8:	66 23       	and	r22, r22
    11ba:	71 f0       	breq	.+28     	; 0x11d8 <__floatsisf+0x74>
    11bc:	96 e8       	ldi	r25, 0x86	; 134
    11be:	86 2f       	mov	r24, r22
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	2a f0       	brmi	.+10     	; 0x11d0 <__floatsisf+0x6c>
    11c6:	9a 95       	dec	r25
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	da f7       	brpl	.-10     	; 0x11c6 <__floatsisf+0x62>
    11d0:	88 0f       	add	r24, r24
    11d2:	96 95       	lsr	r25
    11d4:	87 95       	ror	r24
    11d6:	97 f9       	bld	r25, 7
    11d8:	08 95       	ret

000011da <__fp_cmp>:
    11da:	99 0f       	add	r25, r25
    11dc:	00 08       	sbc	r0, r0
    11de:	55 0f       	add	r21, r21
    11e0:	aa 0b       	sbc	r26, r26
    11e2:	e0 e8       	ldi	r30, 0x80	; 128
    11e4:	fe ef       	ldi	r31, 0xFE	; 254
    11e6:	16 16       	cp	r1, r22
    11e8:	17 06       	cpc	r1, r23
    11ea:	e8 07       	cpc	r30, r24
    11ec:	f9 07       	cpc	r31, r25
    11ee:	c0 f0       	brcs	.+48     	; 0x1220 <__fp_cmp+0x46>
    11f0:	12 16       	cp	r1, r18
    11f2:	13 06       	cpc	r1, r19
    11f4:	e4 07       	cpc	r30, r20
    11f6:	f5 07       	cpc	r31, r21
    11f8:	98 f0       	brcs	.+38     	; 0x1220 <__fp_cmp+0x46>
    11fa:	62 1b       	sub	r22, r18
    11fc:	73 0b       	sbc	r23, r19
    11fe:	84 0b       	sbc	r24, r20
    1200:	95 0b       	sbc	r25, r21
    1202:	39 f4       	brne	.+14     	; 0x1212 <__fp_cmp+0x38>
    1204:	0a 26       	eor	r0, r26
    1206:	61 f0       	breq	.+24     	; 0x1220 <__fp_cmp+0x46>
    1208:	23 2b       	or	r18, r19
    120a:	24 2b       	or	r18, r20
    120c:	25 2b       	or	r18, r21
    120e:	21 f4       	brne	.+8      	; 0x1218 <__fp_cmp+0x3e>
    1210:	08 95       	ret
    1212:	0a 26       	eor	r0, r26
    1214:	09 f4       	brne	.+2      	; 0x1218 <__fp_cmp+0x3e>
    1216:	a1 40       	sbci	r26, 0x01	; 1
    1218:	a6 95       	lsr	r26
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	81 1d       	adc	r24, r1
    121e:	81 1d       	adc	r24, r1
    1220:	08 95       	ret

00001222 <__fp_inf>:
    1222:	97 f9       	bld	r25, 7
    1224:	9f 67       	ori	r25, 0x7F	; 127
    1226:	80 e8       	ldi	r24, 0x80	; 128
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	08 95       	ret

0000122e <__fp_nan>:
    122e:	9f ef       	ldi	r25, 0xFF	; 255
    1230:	80 ec       	ldi	r24, 0xC0	; 192
    1232:	08 95       	ret

00001234 <__fp_pscA>:
    1234:	00 24       	eor	r0, r0
    1236:	0a 94       	dec	r0
    1238:	16 16       	cp	r1, r22
    123a:	17 06       	cpc	r1, r23
    123c:	18 06       	cpc	r1, r24
    123e:	09 06       	cpc	r0, r25
    1240:	08 95       	ret

00001242 <__fp_pscB>:
    1242:	00 24       	eor	r0, r0
    1244:	0a 94       	dec	r0
    1246:	12 16       	cp	r1, r18
    1248:	13 06       	cpc	r1, r19
    124a:	14 06       	cpc	r1, r20
    124c:	05 06       	cpc	r0, r21
    124e:	08 95       	ret

00001250 <__fp_round>:
    1250:	09 2e       	mov	r0, r25
    1252:	03 94       	inc	r0
    1254:	00 0c       	add	r0, r0
    1256:	11 f4       	brne	.+4      	; 0x125c <__fp_round+0xc>
    1258:	88 23       	and	r24, r24
    125a:	52 f0       	brmi	.+20     	; 0x1270 <__fp_round+0x20>
    125c:	bb 0f       	add	r27, r27
    125e:	40 f4       	brcc	.+16     	; 0x1270 <__fp_round+0x20>
    1260:	bf 2b       	or	r27, r31
    1262:	11 f4       	brne	.+4      	; 0x1268 <__fp_round+0x18>
    1264:	60 ff       	sbrs	r22, 0
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <__fp_round+0x20>
    1268:	6f 5f       	subi	r22, 0xFF	; 255
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	08 95       	ret

00001272 <__fp_split3>:
    1272:	57 fd       	sbrc	r21, 7
    1274:	90 58       	subi	r25, 0x80	; 128
    1276:	44 0f       	add	r20, r20
    1278:	55 1f       	adc	r21, r21
    127a:	59 f0       	breq	.+22     	; 0x1292 <__fp_splitA+0x10>
    127c:	5f 3f       	cpi	r21, 0xFF	; 255
    127e:	71 f0       	breq	.+28     	; 0x129c <__fp_splitA+0x1a>
    1280:	47 95       	ror	r20

00001282 <__fp_splitA>:
    1282:	88 0f       	add	r24, r24
    1284:	97 fb       	bst	r25, 7
    1286:	99 1f       	adc	r25, r25
    1288:	61 f0       	breq	.+24     	; 0x12a2 <__fp_splitA+0x20>
    128a:	9f 3f       	cpi	r25, 0xFF	; 255
    128c:	79 f0       	breq	.+30     	; 0x12ac <__fp_splitA+0x2a>
    128e:	87 95       	ror	r24
    1290:	08 95       	ret
    1292:	12 16       	cp	r1, r18
    1294:	13 06       	cpc	r1, r19
    1296:	14 06       	cpc	r1, r20
    1298:	55 1f       	adc	r21, r21
    129a:	f2 cf       	rjmp	.-28     	; 0x1280 <__fp_split3+0xe>
    129c:	46 95       	lsr	r20
    129e:	f1 df       	rcall	.-30     	; 0x1282 <__fp_splitA>
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <__fp_splitA+0x30>
    12a2:	16 16       	cp	r1, r22
    12a4:	17 06       	cpc	r1, r23
    12a6:	18 06       	cpc	r1, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	f1 cf       	rjmp	.-30     	; 0x128e <__fp_splitA+0xc>
    12ac:	86 95       	lsr	r24
    12ae:	71 05       	cpc	r23, r1
    12b0:	61 05       	cpc	r22, r1
    12b2:	08 94       	sec
    12b4:	08 95       	ret

000012b6 <__fp_zero>:
    12b6:	e8 94       	clt

000012b8 <__fp_szero>:
    12b8:	bb 27       	eor	r27, r27
    12ba:	66 27       	eor	r22, r22
    12bc:	77 27       	eor	r23, r23
    12be:	cb 01       	movw	r24, r22
    12c0:	97 f9       	bld	r25, 7
    12c2:	08 95       	ret

000012c4 <__gesf2>:
    12c4:	8a df       	rcall	.-236    	; 0x11da <__fp_cmp>
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <__gesf2+0x6>
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	08 95       	ret

000012cc <__mulsf3>:
    12cc:	0b d0       	rcall	.+22     	; 0x12e4 <__mulsf3x>
    12ce:	c0 cf       	rjmp	.-128    	; 0x1250 <__fp_round>
    12d0:	b1 df       	rcall	.-158    	; 0x1234 <__fp_pscA>
    12d2:	28 f0       	brcs	.+10     	; 0x12de <__mulsf3+0x12>
    12d4:	b6 df       	rcall	.-148    	; 0x1242 <__fp_pscB>
    12d6:	18 f0       	brcs	.+6      	; 0x12de <__mulsf3+0x12>
    12d8:	95 23       	and	r25, r21
    12da:	09 f0       	breq	.+2      	; 0x12de <__mulsf3+0x12>
    12dc:	a2 cf       	rjmp	.-188    	; 0x1222 <__fp_inf>
    12de:	a7 cf       	rjmp	.-178    	; 0x122e <__fp_nan>
    12e0:	11 24       	eor	r1, r1
    12e2:	ea cf       	rjmp	.-44     	; 0x12b8 <__fp_szero>

000012e4 <__mulsf3x>:
    12e4:	c6 df       	rcall	.-116    	; 0x1272 <__fp_split3>
    12e6:	a0 f3       	brcs	.-24     	; 0x12d0 <__mulsf3+0x4>

000012e8 <__mulsf3_pse>:
    12e8:	95 9f       	mul	r25, r21
    12ea:	d1 f3       	breq	.-12     	; 0x12e0 <__mulsf3+0x14>
    12ec:	95 0f       	add	r25, r21
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	55 1f       	adc	r21, r21
    12f2:	62 9f       	mul	r22, r18
    12f4:	f0 01       	movw	r30, r0
    12f6:	72 9f       	mul	r23, r18
    12f8:	bb 27       	eor	r27, r27
    12fa:	f0 0d       	add	r31, r0
    12fc:	b1 1d       	adc	r27, r1
    12fe:	63 9f       	mul	r22, r19
    1300:	aa 27       	eor	r26, r26
    1302:	f0 0d       	add	r31, r0
    1304:	b1 1d       	adc	r27, r1
    1306:	aa 1f       	adc	r26, r26
    1308:	64 9f       	mul	r22, r20
    130a:	66 27       	eor	r22, r22
    130c:	b0 0d       	add	r27, r0
    130e:	a1 1d       	adc	r26, r1
    1310:	66 1f       	adc	r22, r22
    1312:	82 9f       	mul	r24, r18
    1314:	22 27       	eor	r18, r18
    1316:	b0 0d       	add	r27, r0
    1318:	a1 1d       	adc	r26, r1
    131a:	62 1f       	adc	r22, r18
    131c:	73 9f       	mul	r23, r19
    131e:	b0 0d       	add	r27, r0
    1320:	a1 1d       	adc	r26, r1
    1322:	62 1f       	adc	r22, r18
    1324:	83 9f       	mul	r24, r19
    1326:	a0 0d       	add	r26, r0
    1328:	61 1d       	adc	r22, r1
    132a:	22 1f       	adc	r18, r18
    132c:	74 9f       	mul	r23, r20
    132e:	33 27       	eor	r19, r19
    1330:	a0 0d       	add	r26, r0
    1332:	61 1d       	adc	r22, r1
    1334:	23 1f       	adc	r18, r19
    1336:	84 9f       	mul	r24, r20
    1338:	60 0d       	add	r22, r0
    133a:	21 1d       	adc	r18, r1
    133c:	82 2f       	mov	r24, r18
    133e:	76 2f       	mov	r23, r22
    1340:	6a 2f       	mov	r22, r26
    1342:	11 24       	eor	r1, r1
    1344:	9f 57       	subi	r25, 0x7F	; 127
    1346:	50 40       	sbci	r21, 0x00	; 0
    1348:	8a f0       	brmi	.+34     	; 0x136c <__mulsf3_pse+0x84>
    134a:	e1 f0       	breq	.+56     	; 0x1384 <__mulsf3_pse+0x9c>
    134c:	88 23       	and	r24, r24
    134e:	4a f0       	brmi	.+18     	; 0x1362 <__mulsf3_pse+0x7a>
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	bb 1f       	adc	r27, r27
    1356:	66 1f       	adc	r22, r22
    1358:	77 1f       	adc	r23, r23
    135a:	88 1f       	adc	r24, r24
    135c:	91 50       	subi	r25, 0x01	; 1
    135e:	50 40       	sbci	r21, 0x00	; 0
    1360:	a9 f7       	brne	.-22     	; 0x134c <__mulsf3_pse+0x64>
    1362:	9e 3f       	cpi	r25, 0xFE	; 254
    1364:	51 05       	cpc	r21, r1
    1366:	70 f0       	brcs	.+28     	; 0x1384 <__mulsf3_pse+0x9c>
    1368:	5c cf       	rjmp	.-328    	; 0x1222 <__fp_inf>
    136a:	a6 cf       	rjmp	.-180    	; 0x12b8 <__fp_szero>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	ec f3       	brlt	.-6      	; 0x136a <__mulsf3_pse+0x82>
    1370:	98 3e       	cpi	r25, 0xE8	; 232
    1372:	dc f3       	brlt	.-10     	; 0x136a <__mulsf3_pse+0x82>
    1374:	86 95       	lsr	r24
    1376:	77 95       	ror	r23
    1378:	67 95       	ror	r22
    137a:	b7 95       	ror	r27
    137c:	f7 95       	ror	r31
    137e:	e7 95       	ror	r30
    1380:	9f 5f       	subi	r25, 0xFF	; 255
    1382:	c1 f7       	brne	.-16     	; 0x1374 <__mulsf3_pse+0x8c>
    1384:	fe 2b       	or	r31, r30
    1386:	88 0f       	add	r24, r24
    1388:	91 1d       	adc	r25, r1
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	97 f9       	bld	r25, 7
    1390:	08 95       	ret

00001392 <sin>:
    1392:	9f 93       	push	r25
    1394:	05 d0       	rcall	.+10     	; 0x13a0 <__fp_rempio2>
    1396:	0f 90       	pop	r0
    1398:	07 fc       	sbrc	r0, 7
    139a:	ee 5f       	subi	r30, 0xFE	; 254
    139c:	28 c0       	rjmp	.+80     	; 0x13ee <__fp_sinus>
    139e:	47 cf       	rjmp	.-370    	; 0x122e <__fp_nan>

000013a0 <__fp_rempio2>:
    13a0:	70 df       	rcall	.-288    	; 0x1282 <__fp_splitA>
    13a2:	e8 f3       	brcs	.-6      	; 0x139e <sin+0xc>
    13a4:	e8 94       	clt
    13a6:	e0 e0       	ldi	r30, 0x00	; 0
    13a8:	bb 27       	eor	r27, r27
    13aa:	9f 57       	subi	r25, 0x7F	; 127
    13ac:	f0 f0       	brcs	.+60     	; 0x13ea <__fp_rempio2+0x4a>
    13ae:	2a ed       	ldi	r18, 0xDA	; 218
    13b0:	3f e0       	ldi	r19, 0x0F	; 15
    13b2:	49 ec       	ldi	r20, 0xC9	; 201
    13b4:	06 c0       	rjmp	.+12     	; 0x13c2 <__fp_rempio2+0x22>
    13b6:	ee 0f       	add	r30, r30
    13b8:	bb 0f       	add	r27, r27
    13ba:	66 1f       	adc	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	88 1f       	adc	r24, r24
    13c0:	28 f0       	brcs	.+10     	; 0x13cc <__fp_rempio2+0x2c>
    13c2:	b2 3a       	cpi	r27, 0xA2	; 162
    13c4:	62 07       	cpc	r22, r18
    13c6:	73 07       	cpc	r23, r19
    13c8:	84 07       	cpc	r24, r20
    13ca:	28 f0       	brcs	.+10     	; 0x13d6 <__fp_rempio2+0x36>
    13cc:	b2 5a       	subi	r27, 0xA2	; 162
    13ce:	62 0b       	sbc	r22, r18
    13d0:	73 0b       	sbc	r23, r19
    13d2:	84 0b       	sbc	r24, r20
    13d4:	e3 95       	inc	r30
    13d6:	9a 95       	dec	r25
    13d8:	72 f7       	brpl	.-36     	; 0x13b6 <__fp_rempio2+0x16>
    13da:	80 38       	cpi	r24, 0x80	; 128
    13dc:	30 f4       	brcc	.+12     	; 0x13ea <__fp_rempio2+0x4a>
    13de:	9a 95       	dec	r25
    13e0:	bb 0f       	add	r27, r27
    13e2:	66 1f       	adc	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	d2 f7       	brpl	.-12     	; 0x13de <__fp_rempio2+0x3e>
    13ea:	90 48       	sbci	r25, 0x80	; 128
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <__fp_mpack_finite>

000013ee <__fp_sinus>:
    13ee:	ef 93       	push	r30
    13f0:	e0 ff       	sbrs	r30, 0
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <__fp_sinus+0x12>
    13f4:	a2 ea       	ldi	r26, 0xA2	; 162
    13f6:	2a ed       	ldi	r18, 0xDA	; 218
    13f8:	3f e0       	ldi	r19, 0x0F	; 15
    13fa:	49 ec       	ldi	r20, 0xC9	; 201
    13fc:	5f eb       	ldi	r21, 0xBF	; 191
    13fe:	c0 dd       	rcall	.-1152   	; 0xf80 <__addsf3x>
    1400:	27 df       	rcall	.-434    	; 0x1250 <__fp_round>
    1402:	0f 90       	pop	r0
    1404:	03 94       	inc	r0
    1406:	01 fc       	sbrc	r0, 1
    1408:	90 58       	subi	r25, 0x80	; 128
    140a:	e4 ee       	ldi	r30, 0xE4	; 228
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	0e c0       	rjmp	.+28     	; 0x142c <__fp_powsodd>

00001410 <__fp_mpack>:
    1410:	9f 3f       	cpi	r25, 0xFF	; 255
    1412:	31 f0       	breq	.+12     	; 0x1420 <__fp_mpack_finite+0xc>

00001414 <__fp_mpack_finite>:
    1414:	91 50       	subi	r25, 0x01	; 1
    1416:	20 f4       	brcc	.+8      	; 0x1420 <__fp_mpack_finite+0xc>
    1418:	87 95       	ror	r24
    141a:	77 95       	ror	r23
    141c:	67 95       	ror	r22
    141e:	b7 95       	ror	r27
    1420:	88 0f       	add	r24, r24
    1422:	91 1d       	adc	r25, r1
    1424:	96 95       	lsr	r25
    1426:	87 95       	ror	r24
    1428:	97 f9       	bld	r25, 7
    142a:	08 95       	ret

0000142c <__fp_powsodd>:
    142c:	9f 93       	push	r25
    142e:	8f 93       	push	r24
    1430:	7f 93       	push	r23
    1432:	6f 93       	push	r22
    1434:	ff 93       	push	r31
    1436:	ef 93       	push	r30
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	47 df       	rcall	.-370    	; 0x12cc <__mulsf3>
    143e:	ef 91       	pop	r30
    1440:	ff 91       	pop	r31
    1442:	05 d0       	rcall	.+10     	; 0x144e <__fp_powser>
    1444:	2f 91       	pop	r18
    1446:	3f 91       	pop	r19
    1448:	4f 91       	pop	r20
    144a:	5f 91       	pop	r21
    144c:	3f cf       	rjmp	.-386    	; 0x12cc <__mulsf3>

0000144e <__fp_powser>:
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	1f 93       	push	r17
    1454:	0f 93       	push	r16
    1456:	ff 92       	push	r15
    1458:	ef 92       	push	r14
    145a:	df 92       	push	r13
    145c:	7b 01       	movw	r14, r22
    145e:	8c 01       	movw	r16, r24
    1460:	68 94       	set
    1462:	05 c0       	rjmp	.+10     	; 0x146e <__fp_powser+0x20>
    1464:	da 2e       	mov	r13, r26
    1466:	ef 01       	movw	r28, r30
    1468:	3d df       	rcall	.-390    	; 0x12e4 <__mulsf3x>
    146a:	fe 01       	movw	r30, r28
    146c:	e8 94       	clt
    146e:	a5 91       	lpm	r26, Z+
    1470:	25 91       	lpm	r18, Z+
    1472:	35 91       	lpm	r19, Z+
    1474:	45 91       	lpm	r20, Z+
    1476:	55 91       	lpm	r21, Z+
    1478:	ae f3       	brts	.-22     	; 0x1464 <__fp_powser+0x16>
    147a:	ef 01       	movw	r28, r30
    147c:	81 dd       	rcall	.-1278   	; 0xf80 <__addsf3x>
    147e:	fe 01       	movw	r30, r28
    1480:	97 01       	movw	r18, r14
    1482:	a8 01       	movw	r20, r16
    1484:	da 94       	dec	r13
    1486:	79 f7       	brne	.-34     	; 0x1466 <__fp_powser+0x18>
    1488:	df 90       	pop	r13
    148a:	ef 90       	pop	r14
    148c:	ff 90       	pop	r15
    148e:	0f 91       	pop	r16
    1490:	1f 91       	pop	r17
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <__divmodhi4>:
    1498:	97 fb       	bst	r25, 7
    149a:	07 2e       	mov	r0, r23
    149c:	16 f4       	brtc	.+4      	; 0x14a2 <__divmodhi4+0xa>
    149e:	00 94       	com	r0
    14a0:	06 d0       	rcall	.+12     	; 0x14ae <__divmodhi4_neg1>
    14a2:	77 fd       	sbrc	r23, 7
    14a4:	08 d0       	rcall	.+16     	; 0x14b6 <__divmodhi4_neg2>
    14a6:	0b d0       	rcall	.+22     	; 0x14be <__udivmodhi4>
    14a8:	07 fc       	sbrc	r0, 7
    14aa:	05 d0       	rcall	.+10     	; 0x14b6 <__divmodhi4_neg2>
    14ac:	3e f4       	brtc	.+14     	; 0x14bc <__divmodhi4_exit>

000014ae <__divmodhi4_neg1>:
    14ae:	90 95       	com	r25
    14b0:	81 95       	neg	r24
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	08 95       	ret

000014b6 <__divmodhi4_neg2>:
    14b6:	70 95       	com	r23
    14b8:	61 95       	neg	r22
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255

000014bc <__divmodhi4_exit>:
    14bc:	08 95       	ret

000014be <__udivmodhi4>:
    14be:	aa 1b       	sub	r26, r26
    14c0:	bb 1b       	sub	r27, r27
    14c2:	51 e1       	ldi	r21, 0x11	; 17
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <__udivmodhi4_ep>

000014c6 <__udivmodhi4_loop>:
    14c6:	aa 1f       	adc	r26, r26
    14c8:	bb 1f       	adc	r27, r27
    14ca:	a6 17       	cp	r26, r22
    14cc:	b7 07       	cpc	r27, r23
    14ce:	10 f0       	brcs	.+4      	; 0x14d4 <__udivmodhi4_ep>
    14d0:	a6 1b       	sub	r26, r22
    14d2:	b7 0b       	sbc	r27, r23

000014d4 <__udivmodhi4_ep>:
    14d4:	88 1f       	adc	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	5a 95       	dec	r21
    14da:	a9 f7       	brne	.-22     	; 0x14c6 <__udivmodhi4_loop>
    14dc:	80 95       	com	r24
    14de:	90 95       	com	r25
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	08 95       	ret

000014e6 <malloc>:
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	91 05       	cpc	r25, r1
    14f2:	10 f4       	brcc	.+4      	; 0x14f8 <malloc+0x12>
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <__flp>
    14fc:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <__flp+0x1>
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	30 97       	sbiw	r30, 0x00	; 0
    150a:	19 f1       	breq	.+70     	; 0x1552 <malloc+0x6c>
    150c:	40 81       	ld	r20, Z
    150e:	51 81       	ldd	r21, Z+1	; 0x01
    1510:	02 81       	ldd	r16, Z+2	; 0x02
    1512:	13 81       	ldd	r17, Z+3	; 0x03
    1514:	48 17       	cp	r20, r24
    1516:	59 07       	cpc	r21, r25
    1518:	c8 f0       	brcs	.+50     	; 0x154c <malloc+0x66>
    151a:	84 17       	cp	r24, r20
    151c:	95 07       	cpc	r25, r21
    151e:	69 f4       	brne	.+26     	; 0x153a <malloc+0x54>
    1520:	10 97       	sbiw	r26, 0x00	; 0
    1522:	31 f0       	breq	.+12     	; 0x1530 <malloc+0x4a>
    1524:	12 96       	adiw	r26, 0x02	; 2
    1526:	0c 93       	st	X, r16
    1528:	12 97       	sbiw	r26, 0x02	; 2
    152a:	13 96       	adiw	r26, 0x03	; 3
    152c:	1c 93       	st	X, r17
    152e:	27 c0       	rjmp	.+78     	; 0x157e <malloc+0x98>
    1530:	00 93 3b 03 	sts	0x033B, r16	; 0x80033b <__flp>
    1534:	10 93 3c 03 	sts	0x033C, r17	; 0x80033c <__flp+0x1>
    1538:	22 c0       	rjmp	.+68     	; 0x157e <malloc+0x98>
    153a:	21 15       	cp	r18, r1
    153c:	31 05       	cpc	r19, r1
    153e:	19 f0       	breq	.+6      	; 0x1546 <malloc+0x60>
    1540:	42 17       	cp	r20, r18
    1542:	53 07       	cpc	r21, r19
    1544:	18 f4       	brcc	.+6      	; 0x154c <malloc+0x66>
    1546:	9a 01       	movw	r18, r20
    1548:	bd 01       	movw	r22, r26
    154a:	ef 01       	movw	r28, r30
    154c:	df 01       	movw	r26, r30
    154e:	f8 01       	movw	r30, r16
    1550:	db cf       	rjmp	.-74     	; 0x1508 <malloc+0x22>
    1552:	21 15       	cp	r18, r1
    1554:	31 05       	cpc	r19, r1
    1556:	f9 f0       	breq	.+62     	; 0x1596 <malloc+0xb0>
    1558:	28 1b       	sub	r18, r24
    155a:	39 0b       	sbc	r19, r25
    155c:	24 30       	cpi	r18, 0x04	; 4
    155e:	31 05       	cpc	r19, r1
    1560:	80 f4       	brcc	.+32     	; 0x1582 <malloc+0x9c>
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	9b 81       	ldd	r25, Y+3	; 0x03
    1566:	61 15       	cp	r22, r1
    1568:	71 05       	cpc	r23, r1
    156a:	21 f0       	breq	.+8      	; 0x1574 <malloc+0x8e>
    156c:	fb 01       	movw	r30, r22
    156e:	93 83       	std	Z+3, r25	; 0x03
    1570:	82 83       	std	Z+2, r24	; 0x02
    1572:	04 c0       	rjmp	.+8      	; 0x157c <malloc+0x96>
    1574:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <__flp+0x1>
    1578:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <__flp>
    157c:	fe 01       	movw	r30, r28
    157e:	32 96       	adiw	r30, 0x02	; 2
    1580:	44 c0       	rjmp	.+136    	; 0x160a <malloc+0x124>
    1582:	fe 01       	movw	r30, r28
    1584:	e2 0f       	add	r30, r18
    1586:	f3 1f       	adc	r31, r19
    1588:	81 93       	st	Z+, r24
    158a:	91 93       	st	Z+, r25
    158c:	22 50       	subi	r18, 0x02	; 2
    158e:	31 09       	sbc	r19, r1
    1590:	39 83       	std	Y+1, r19	; 0x01
    1592:	28 83       	st	Y, r18
    1594:	3a c0       	rjmp	.+116    	; 0x160a <malloc+0x124>
    1596:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <__brkval>
    159a:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <__brkval+0x1>
    159e:	23 2b       	or	r18, r19
    15a0:	41 f4       	brne	.+16     	; 0x15b2 <malloc+0xcc>
    15a2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    15a6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    15aa:	30 93 3a 03 	sts	0x033A, r19	; 0x80033a <__brkval+0x1>
    15ae:	20 93 39 03 	sts	0x0339, r18	; 0x800339 <__brkval>
    15b2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    15b6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    15ba:	21 15       	cp	r18, r1
    15bc:	31 05       	cpc	r19, r1
    15be:	41 f4       	brne	.+16     	; 0x15d0 <malloc+0xea>
    15c0:	2d b7       	in	r18, 0x3d	; 61
    15c2:	3e b7       	in	r19, 0x3e	; 62
    15c4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    15c8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    15cc:	24 1b       	sub	r18, r20
    15ce:	35 0b       	sbc	r19, r21
    15d0:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <__brkval>
    15d4:	f0 91 3a 03 	lds	r31, 0x033A	; 0x80033a <__brkval+0x1>
    15d8:	e2 17       	cp	r30, r18
    15da:	f3 07       	cpc	r31, r19
    15dc:	a0 f4       	brcc	.+40     	; 0x1606 <malloc+0x120>
    15de:	2e 1b       	sub	r18, r30
    15e0:	3f 0b       	sbc	r19, r31
    15e2:	28 17       	cp	r18, r24
    15e4:	39 07       	cpc	r19, r25
    15e6:	78 f0       	brcs	.+30     	; 0x1606 <malloc+0x120>
    15e8:	ac 01       	movw	r20, r24
    15ea:	4e 5f       	subi	r20, 0xFE	; 254
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	24 17       	cp	r18, r20
    15f0:	35 07       	cpc	r19, r21
    15f2:	48 f0       	brcs	.+18     	; 0x1606 <malloc+0x120>
    15f4:	4e 0f       	add	r20, r30
    15f6:	5f 1f       	adc	r21, r31
    15f8:	50 93 3a 03 	sts	0x033A, r21	; 0x80033a <__brkval+0x1>
    15fc:	40 93 39 03 	sts	0x0339, r20	; 0x800339 <__brkval>
    1600:	81 93       	st	Z+, r24
    1602:	91 93       	st	Z+, r25
    1604:	02 c0       	rjmp	.+4      	; 0x160a <malloc+0x124>
    1606:	e0 e0       	ldi	r30, 0x00	; 0
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	cf 01       	movw	r24, r30
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <free>:
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	09 f4       	brne	.+2      	; 0x1620 <free+0xa>
    161e:	81 c0       	rjmp	.+258    	; 0x1722 <free+0x10c>
    1620:	fc 01       	movw	r30, r24
    1622:	32 97       	sbiw	r30, 0x02	; 2
    1624:	13 82       	std	Z+3, r1	; 0x03
    1626:	12 82       	std	Z+2, r1	; 0x02
    1628:	a0 91 3b 03 	lds	r26, 0x033B	; 0x80033b <__flp>
    162c:	b0 91 3c 03 	lds	r27, 0x033C	; 0x80033c <__flp+0x1>
    1630:	10 97       	sbiw	r26, 0x00	; 0
    1632:	81 f4       	brne	.+32     	; 0x1654 <free+0x3e>
    1634:	20 81       	ld	r18, Z
    1636:	31 81       	ldd	r19, Z+1	; 0x01
    1638:	82 0f       	add	r24, r18
    163a:	93 1f       	adc	r25, r19
    163c:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <__brkval>
    1640:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <__brkval+0x1>
    1644:	28 17       	cp	r18, r24
    1646:	39 07       	cpc	r19, r25
    1648:	51 f5       	brne	.+84     	; 0x169e <free+0x88>
    164a:	f0 93 3a 03 	sts	0x033A, r31	; 0x80033a <__brkval+0x1>
    164e:	e0 93 39 03 	sts	0x0339, r30	; 0x800339 <__brkval>
    1652:	67 c0       	rjmp	.+206    	; 0x1722 <free+0x10c>
    1654:	ed 01       	movw	r28, r26
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	ce 17       	cp	r28, r30
    165c:	df 07       	cpc	r29, r31
    165e:	40 f4       	brcc	.+16     	; 0x1670 <free+0x5a>
    1660:	4a 81       	ldd	r20, Y+2	; 0x02
    1662:	5b 81       	ldd	r21, Y+3	; 0x03
    1664:	9e 01       	movw	r18, r28
    1666:	41 15       	cp	r20, r1
    1668:	51 05       	cpc	r21, r1
    166a:	f1 f0       	breq	.+60     	; 0x16a8 <free+0x92>
    166c:	ea 01       	movw	r28, r20
    166e:	f5 cf       	rjmp	.-22     	; 0x165a <free+0x44>
    1670:	d3 83       	std	Z+3, r29	; 0x03
    1672:	c2 83       	std	Z+2, r28	; 0x02
    1674:	40 81       	ld	r20, Z
    1676:	51 81       	ldd	r21, Z+1	; 0x01
    1678:	84 0f       	add	r24, r20
    167a:	95 1f       	adc	r25, r21
    167c:	c8 17       	cp	r28, r24
    167e:	d9 07       	cpc	r29, r25
    1680:	59 f4       	brne	.+22     	; 0x1698 <free+0x82>
    1682:	88 81       	ld	r24, Y
    1684:	99 81       	ldd	r25, Y+1	; 0x01
    1686:	84 0f       	add	r24, r20
    1688:	95 1f       	adc	r25, r21
    168a:	02 96       	adiw	r24, 0x02	; 2
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	9b 81       	ldd	r25, Y+3	; 0x03
    1694:	93 83       	std	Z+3, r25	; 0x03
    1696:	82 83       	std	Z+2, r24	; 0x02
    1698:	21 15       	cp	r18, r1
    169a:	31 05       	cpc	r19, r1
    169c:	29 f4       	brne	.+10     	; 0x16a8 <free+0x92>
    169e:	f0 93 3c 03 	sts	0x033C, r31	; 0x80033c <__flp+0x1>
    16a2:	e0 93 3b 03 	sts	0x033B, r30	; 0x80033b <__flp>
    16a6:	3d c0       	rjmp	.+122    	; 0x1722 <free+0x10c>
    16a8:	e9 01       	movw	r28, r18
    16aa:	fb 83       	std	Y+3, r31	; 0x03
    16ac:	ea 83       	std	Y+2, r30	; 0x02
    16ae:	49 91       	ld	r20, Y+
    16b0:	59 91       	ld	r21, Y+
    16b2:	c4 0f       	add	r28, r20
    16b4:	d5 1f       	adc	r29, r21
    16b6:	ec 17       	cp	r30, r28
    16b8:	fd 07       	cpc	r31, r29
    16ba:	61 f4       	brne	.+24     	; 0x16d4 <free+0xbe>
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	84 0f       	add	r24, r20
    16c2:	95 1f       	adc	r25, r21
    16c4:	02 96       	adiw	r24, 0x02	; 2
    16c6:	e9 01       	movw	r28, r18
    16c8:	99 83       	std	Y+1, r25	; 0x01
    16ca:	88 83       	st	Y, r24
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	9b 83       	std	Y+3, r25	; 0x03
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	e0 e0       	ldi	r30, 0x00	; 0
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	12 96       	adiw	r26, 0x02	; 2
    16da:	8d 91       	ld	r24, X+
    16dc:	9c 91       	ld	r25, X
    16de:	13 97       	sbiw	r26, 0x03	; 3
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	19 f0       	breq	.+6      	; 0x16ea <free+0xd4>
    16e4:	fd 01       	movw	r30, r26
    16e6:	dc 01       	movw	r26, r24
    16e8:	f7 cf       	rjmp	.-18     	; 0x16d8 <free+0xc2>
    16ea:	8d 91       	ld	r24, X+
    16ec:	9c 91       	ld	r25, X
    16ee:	11 97       	sbiw	r26, 0x01	; 1
    16f0:	9d 01       	movw	r18, r26
    16f2:	2e 5f       	subi	r18, 0xFE	; 254
    16f4:	3f 4f       	sbci	r19, 0xFF	; 255
    16f6:	82 0f       	add	r24, r18
    16f8:	93 1f       	adc	r25, r19
    16fa:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <__brkval>
    16fe:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <__brkval+0x1>
    1702:	28 17       	cp	r18, r24
    1704:	39 07       	cpc	r19, r25
    1706:	69 f4       	brne	.+26     	; 0x1722 <free+0x10c>
    1708:	30 97       	sbiw	r30, 0x00	; 0
    170a:	29 f4       	brne	.+10     	; 0x1716 <free+0x100>
    170c:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <__flp+0x1>
    1710:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <__flp>
    1714:	02 c0       	rjmp	.+4      	; 0x171a <free+0x104>
    1716:	13 82       	std	Z+3, r1	; 0x03
    1718:	12 82       	std	Z+2, r1	; 0x02
    171a:	b0 93 3a 03 	sts	0x033A, r27	; 0x80033a <__brkval+0x1>
    171e:	a0 93 39 03 	sts	0x0339, r26	; 0x800339 <__brkval>
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <_exit>:
    1728:	f8 94       	cli

0000172a <__stop_program>:
    172a:	ff cf       	rjmp	.-2      	; 0x172a <__stop_program>
